---
layout:     post
title:      "Docker入门教程（七）Docker API"
subtitle:   "Linux,Docker"
date:       2018-06-11 17:15:06
author:     "CaoZhiLong"
header-img: "img/post-bg-docker-with-markdown.jpg"
tags:
    - Linux
    - Docker
---

# Docker入门教程（七）Docker API                            


【编者的话】DockerOne组织翻译了Flux7的Docker入门教程，本文是系列入门教程的第七篇，重点介绍了Docker Registry API和Docker Hub API。  

纵观我们的Docker系列教程，我们已经讨论了很多重要的[Docker组件](http://dockerone.com/article/101)与[命令](http://dockerone.com/article/102)。在本文中，我们将继续深入学习Docker：剖析Docker APIs。  

Docker提供了很多的API以便用户使用。这些API包含四个方面：  

* Docker Registry API
* Docker Hub API
* Docker OAuth API
* Docker Remote API  

具体到这篇文章，我们将讨论Docker Registry API以及Docker Hub API。  

### Docker Registry APIDocker Registry API是[Docker Registry](http://dockerone.com/article/104)的REST API，它简化了镜像和仓库的存储。该API不能访问用户帐户或者获得授权。你可以阅读[Docker系列教程的第四章](http://dockerone.com/article/104)，以了解更多有关Registry的类型（译者注：Docker中有几种不同的Registry）。  

#### Extract image layer:取出镜像层：  
`GET /v1/images/(image_id)/layer`  

[![get-image-layer.jpg](http://dockone.io/uploads/article/20141230/c3fa5338078b6382860aa192cb2a149e.jpg "get-image-layer.jpg")](http://dockone.io/uploads/article/20141230/c3fa5338078b6382860aa192cb2a149e.jpg)  

#### Insert image layer:插入镜像层：  
`PUT /v1/images/(image_id)/layer`  

#### Retrieve an image:检索镜像:  
`GET /v1/images/(image_id)/json`  

#### Retrieve roots of an image:检索根镜像：  
`GET /v1/images/(image_id)/ancestry`  

#### Obtain all tags or specific tag of a repository:获取库里所有的标签或者指定标签：  
`GET /v1/repositories/(namespace)/(repository)/tags`  

或者  
`GET /v1/repositories/(namespace)/(repository)/tags/(tag*)`  

[![docker-get-all-tags.png](http://dockone.io/uploads/article/20141230/fbc70362835df0d928037e1c48d5a452.png "docker-get-all-tags.png")](http://dockone.io/uploads/article/20141230/fbc70362835df0d928037e1c48d5a452.png)  

#### Delete a tag:删除标签：  
`DELETE /v1/repositories/(namespace)/(repository)/tags/(tag*)`  

[![delete-a-tag.jpg](http://dockone.io/uploads/article/20141230/081c691cc8c4672f55b8e9a77300c9ff.jpg "delete-a-tag.jpg")](http://dockone.io/uploads/article/20141230/081c691cc8c4672f55b8e9a77300c9ff.jpg)  

#### Status check of registry:registry状态检查：  
`GET /v1/_ping`  

[![registry-ping.png](http://dockone.io/uploads/article/20141230/0c2c1bbfc56599290e5e87c2d6627ddd.png "registry-ping.png")](http://dockone.io/uploads/article/20141230/0c2c1bbfc56599290e5e87c2d6627ddd.png)  

### Docker Hub APIDocker Hub API是Docker Hub的一个简单的REST API。再提醒一下，请参考[Docker系列教程的第四篇文章](http://dockerone.com/article/104)了解Docker Hub。Docker Hub 通过管理校验（checksums）以及公共命名空间（public namespaces）来控制着用户帐户和授权。该API还支持有关用户仓库和library仓库的操作。  

首先，让我们来看看特殊的library仓库（需要管理员权限）的命令：  

1. **创建一个新的仓库**。使用以下命令可以创建新的library仓库：  
`PUT /v1/repositories/(repo_name)/`  

其中，`repo_name`是新的仓库名称。  

2. **删除已经存在的仓库**。命令如下：  
`DELETE /v1/repositories/(repo_name)/`  

其中，`repo_name`是要删除的仓库名称。  

3. **更新仓库镜像**。命令如下：  
`PUT /v1/repositories/(repo_name)/images`  

4. **从仓库中获取镜像**。命令如下：  
`GET /v1/repositories/(repo_name)/images`  

5. **授权**。使用Token获取仓库授权，如下：  
`PUT /v1/repositories/(repo_name)/auth`  

接下来，让我们来看看用户仓库的命令。library仓库与用户仓库命令之间的主要区别是命名空间的使用。  

1.**创建用户仓库**。命令如下：  
`PUT /v1/repositories/(namespace)/(repo_name)/`  

[![create-user.png](http://dockone.io/uploads/article/20141230/df7fd7439120cdf59b7a206557b3525c.png "create-user.png")](http://dockone.io/uploads/article/20141230/df7fd7439120cdf59b7a206557b3525c.png)  

2.**删除用户仓库**，命令如下：  
`DELETE /v1/repositories/(namespace)/(repo_name)/`  

[![docker-delete-a-repo.png](http://dockone.io/uploads/article/20141230/b5392c054bf4b1e6e2d71cbd692a3d6b.png "docker-delete-a-repo.png")](http://dockone.io/uploads/article/20141230/b5392c054bf4b1e6e2d71cbd692a3d6b.png)  

3.**更新用户仓库镜像**，命令如下：  
`PUT /v1/repositories/(namespace)/(repo_name)/images`  

[![docker-update-image.png](http://dockone.io/uploads/article/20141230/a59d0b89aecec2bba4ef2082ae2c4ba6.png "docker-update-image.png")](http://dockone.io/uploads/article/20141230/a59d0b89aecec2bba4ef2082ae2c4ba6.png)  

4.**从仓库中下载镜像**。如下：  
`GET /v1/repositories/(namespace)/(repo_name)/images`  

[![docker-get-user-images.png](http://dockone.io/uploads/article/20141230/7a6c3bc989f3b256bcfd0c2a5ff82867.png "docker-get-user-images.png")](http://dockone.io/uploads/article/20141230/7a6c3bc989f3b256bcfd0c2a5ff82867.png)  

5.**验证用户登录**，如下：  
`GET /v1/users`  

[![docker-user-login.png](http://dockone.io/uploads/article/20141230/0cecf1ebf42901f88ccc951362362452.png "docker-user-login.png")](http://dockone.io/uploads/article/20141230/0cecf1ebf42901f88ccc951362362452.png)  

6.**添加新用户**，命令如下：  
`POST /v1/users`  

7.**更新用户信息**，如下：  
`PUT /v1/users/(username)/`  

现在，我们已经走过了Docker API之旅的第一站，第二站是有关Docker OAuth以及Remote API的内容，我们将在[Docker系列教程的下一篇](http://dockerone.com/article/109)见。  

**原文链接：[Ultimate Guide for Docker APIs](http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-7-ultimate-guide-for-docker-apis)（翻译：[田浩浩](https://github.com/llitfkitfk) 审校：李颖杰）**  

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝  
**译者介绍**  
**田浩浩**，[悉尼大学USYD](http://sydney.edu.au/engineering/it/)硕士研究生，目前在珠海从事Android应用开发工作。业余时间专注Docker的学习与研究，希望通过[DockerOne](http://dockerone.com/)把最新最优秀的译文贡献给大家，与读者一起畅游Docker的海洋。  

-----------------------------------------  
[Docker入门教程（一）介绍](http://dockerone.com/article/101)  
[Docker入门教程（二）命令](http://dockerone.com/article/102)  
[Docker入门教程（三）DockerFile](http://dockerone.com/article/103)  
[Docker入门教程（四）Docker Registry](http://dockerone.com/article/104)  
[Docker入门教程（五）Docker安全](http://dockerone.com/article/105)  
[Docker入门教程（六）另外的15个Docker命令](http://dockerone.com/article/106)  
[Docker入门教程（七）Docker API](http://dockerone.com/article/107)  
[Docker入门教程（八）Docker Remote API](http://dockerone.com/article/109)  
[Docker入门教程（九）10个镜像相关的API](http://dockerone.com/article/110)
