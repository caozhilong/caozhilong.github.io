---
layout:     post
title:      "Docker入门教程（二）命令"
subtitle:   "Linux,Docker"
date:       2018-06-11 09:15:06
author:     "CaoZhiLong"
header-img: "img/post-bg-docker-with-markdown.jpg"
tags:
    - Linux
    - Docker
---


# Docker入门教程（二）命令                            


【编者的话】DockerOne组织翻译了Flux7的Docker入门教程，本文是系列入门教程的第二篇，介绍了Docker的基本命令以及命令的用法和功能。  

在[Docker系列教程的第一篇文章](http://dockerone.com/article/101)中，我们了解了Docker的基础知识，知道了它是如何工作以及如何安装的。在这篇文章中，我们将学习15个Docker命令，并通过实践来学习它是如何工作的。  

首先，让我们通过下面的命令来检查Docker的安装是否正确：  

<pre class="prettyprint">
docker info   
</pre>  

如果没有找到这条命令，则表示Docker安装错误。如果安装正确，则会输出类似下面的内容：  

[![docker-info.png](http://dockone.io/uploads/article/20141229/68dab0635310f3b5405cb950b5cbb96b.png "docker-info.png")](http://dockone.io/uploads/article/20141229/68dab0635310f3b5405cb950b5cbb96b.png)  

到这一步Docker里还没有镜像或是容器。所以，让我们通过使用命令预先构建的镜像来创建来一个：  

<pre class="prettyprint">
sudo docker pull busybox  
</pre>  

[![docker-pull-busybox.png](http://dockone.io/uploads/article/20141229/ebd90889c2d6e424753a10925ad83acc.png "docker-pull-busybox.png")](http://dockone.io/uploads/article/20141229/ebd90889c2d6e424753a10925ad83acc.png)  

BusyBox是一个最小的Linux系统，它提供了该系统的主要功能，不包含一些与GNU相关的功能和选项。  

下一步我们将运行一个“Hello World”的例子，我们暂且叫它“Hello Docker”吧。  

<pre class="prettyprint">
docker run busybox /bin/echo Hello Docker  
</pre>  

[![hello-docker.png](http://dockone.io/uploads/article/20141229/327aae80228f58acad3d35167289be17.png "hello-docker.png")](http://dockone.io/uploads/article/20141229/327aae80228f58acad3d35167289be17.png)  

现在，让我们以后台进程的方式运行`hello docker`：  

<pre class="prettyprint">
sample_job=$(docker run -d busybox /bin/sh -c "while true; do echo Docker; sleep 1; done")  
</pre>  

[![docker-job.png](http://dockone.io/uploads/article/20141229/fbda65537920ab24b9f7a198c71d2011.png "docker-job.png")](http://dockone.io/uploads/article/20141229/fbda65537920ab24b9f7a198c71d2011.png)  
`sample_job`命令会隔一秒打印一次Docker，使用`docker logs`可以查看输出的结果。如果没有给这个job起名字，那这个job就会被分配一个id，以后使用命令例如`docker logs`查看日志就会变得比较麻烦。  

运行`docker logs`命令来查看job的当前状态：  

<pre class="prettyprint">
docker logs $sample_job  
</pre>  

所有Docker命令可以用以下命令查看：  

<pre class="prettyprint">
docker help  
</pre>  

名为`sample_job`的容器，可以使用以下命令来停止：  

<pre class="prettyprint">
docker stop $sample_job  
</pre>  

使用以下命令可以重新启动该容器：  

<pre class="prettyprint">
docker restart $sample_job  
</pre>  

如果要完全移除容器，需要先将该容器停止，然后才能移除。像这样：  

<pre class="prettyprint">
docker stop $sample_job  

docker rm $sample_job  
</pre>  

将容器的状态保存为镜像，使用以下命令：  

<pre class="prettyprint">
docker commit $sample_job job1  
</pre>  

注意，镜像名称只能取字符[a-z]和数字[0-9]。  

现在，你就可以使用以下命令查看所有镜像的列表：  

<pre class="prettyprint">
docker images  
</pre>  

在[我们之前的Docker教程](http://dockerone.com/article/101)中，我们学习过镜像是存储在Docker registry。在registry中的镜像可以使用以下命令查找到：  

<pre class="prettyprint">
docker search (image-name)  
</pre>  

查看镜像的历史版本可以执行以下命令：  

<pre class="prettyprint">
docker history (image_name)  
</pre>  

最后，使用以下命令将镜像推送到registry：  

<pre class="prettyprint">
docker push (image_name)  
</pre>  

非常重要的一点是，你必须要知道存储库不是根存储库，它应该使用此格式`(user)/(repo_name)`。  

# 修改docker默认端口号

**CentOS 6**

**CentOS 7设置**

~~在RHEL7中，您还可以 `vim /etc/sysconfig/docker`文件，而不是修改docker.service单元文件~~

```shell
# /etc/sysconfig/docker

# Modify these options if you want to change the way the docker daemon runs
OPTIONS=--selinux-enabled -H unix:///var/run/docker.sock -H tcp://0.0.0.0:4243
```
1. 找到systemd目录下docker.service文件,默认位置

```shell 
/usr/lib/systemd/system/docker.service
```
2. 编辑docker.service文件，找到[service]节点，找到ExecStart行

```shell
[Unit]
Description=Docker Application Container Engine
Documentation=http://docs.docker.com
After=network.target docker.socket
[Service]
Type=notify
EnvironmentFile=-/run/flannel/docker
WorkingDirectory=/usr/local/bin
ExecStart=/usr/bin/dockerd                 -H tcp://0.0.0.0:4243                 -H unix:///var/run/docker.sock                 --selinux-enabled=false                 --log-opt max-size=1g
ExecReload=/bin/kill -s HUP
# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
#TasksMax=infinity
TimeoutStartSec=0
# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes
# kill only the docker process, not all processes in the cgroup
KillMode=process
Restart=on-failure
[Install]
WantedBy=multi-user.target

```
3. 刷新配置文件
```shell
sudo systemctl daemon-reload //刷新上面的文件更改
```
4. 重启docker服务
```shell 
sudo systemctl重启docker
```
5. 验证端口是否打开
```
netstat -l | grep 4243 //验证端口是否打开
```

6. 从容器外部连接docker

```shell
从某个地方连接到docker主机，比如Jenkins Docker Plugin，即tcp：// [server_ip]：4243
```
参见:(https://stackoverflow.com/questions/26166550/set-docker-opts-in-centos/44834532#44834532)

这都是一些非常基本的Docker命令。在我们[Docker教程系列的第六章](http://dockerone.com/article/106)，我们将讨论如何使用Docker运行Python的Web应用程序，以及一些进阶的Docker命令。  

**原文链接：[ Part 2: The 15 Commands](http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-1-an-introduction)（翻译：[田浩浩](https://github.com/llitfkitfk) 审校：李颖杰）**  

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝  
**译者介绍**  
**田浩浩**，[悉尼大学USYD](http://sydney.edu.au/engineering/it/)硕士研究生，目前在珠海从事Android应用开发工作。业余时间专注Docker的学习与研究，希望通过[DockerOne](http://dockerone.com/)把最新最优秀的译文贡献给大家，与读者一起畅游Docker的海洋。  

-----------------------------------------  
[Docker入门教程（一）介绍](http://dockerone.com/article/101)  
[Docker入门教程（二）命令](http://dockerone.com/article/102)  
[Docker入门教程（三）DockerFile](http://dockerone.com/article/103)  
[Docker入门教程（四）Docker Registry](http://dockerone.com/article/104)  
[Docker入门教程（五）Docker安全](http://dockerone.com/article/105)  
[Docker入门教程（六）另外的15个Docker命令](http://dockerone.com/article/106)  
[Docker入门教程（七）Docker API](http://dockerone.com/article/107)  
[Docker入门教程（八）Docker Remote API](http://dockerone.com/article/109)  
[Docker入门教程（九）10个镜像相关的API](http://dockerone.com/article/110)
