I":"<h1 id="docker入门教程一介绍">Docker入门教程（一）介绍</h1>

<p>【编者的话】DockerOne组织翻译了Flux7的Docker入门教程，本文是系列入门教程的第一篇，介绍了Docker的基础概念以及Docker的安装。</p>

<p>Docker是一个新的容器化的技术，它轻巧，且易移植，号称“build once, configure once and run anywhere（译者注：这个就不翻译了，翻译出来味道就没了）”。本文是Flux7的Docker系列教程的第一部分。请和这份教程一起学习和理解Docker有什么优势以及如何更好地使用它。</p>

<p>让我们一起来学习Docker。</p>

<p>本文主要涉及Docker的基础知识：Docker的特征、理念以及如何安装使用Docker。</p>

<h3 id="docker-特征docker有不少有趣的功能通过本教程相信你会更好地理解它们docker的特性主要包括以下几点">Docker 特征Docker有不少有趣的功能，通过本教程相信你会更好地理解它们。Docker的特性主要包括以下几点：</h3>

<ul>
  <li>速度飞快以及优雅的隔离框架</li>
  <li>物美价廉</li>
  <li>CPU/内存的低消耗</li>
  <li>快速开/关机</li>
  <li>跨云计算基础构架</li>
</ul>

<h3 id="docker-组件与元素docker有三个组件和三个基本元素读者可以快速浏览下面这个视频来了解这些组建和元素以及它们的关系三个组件分别是">Docker 组件与元素Docker有三个组件和三个基本元素，读者可以快速浏览下面<a href="https://www.youtube.com/watch?v=gNP9vJ3gMDo&amp;feature=youtu.be">这个视频</a>来了解这些组建和元素，以及它们的关系。三个组件分别是：</h3>

<ul>
  <li><code class="highlighter-rouge">Docker Client</code> 是用户界面，它支持用户与<code class="highlighter-rouge">Docker Daemon</code>之间通信。</li>
  <li><code class="highlighter-rouge">Docker Daemon</code>运行于主机上，处理服务请求。</li>
  <li><code class="highlighter-rouge">Docker Index</code>是中央registry，支持拥有公有与私有访问权限的Docker容器镜像的备份。</li>
</ul>

<p>三个基本要素分别是：</p>

<ul>
  <li><code class="highlighter-rouge">Docker Containers</code>负责应用程序的运行，包括操作系统、用户添加的文件以及元数据。</li>
  <li><code class="highlighter-rouge">Docker Images</code>是一个只读模板，用来运行Docker容器。</li>
  <li><code class="highlighter-rouge">DockerFile</code>是文件指令集，用来说明如何自动创建Docker镜像。</li>
</ul>

<p><a href="http://dockone.io/uploads/article/20141229/b28a5a6c1709746deb0aa2530be49af1.png"><img src="http://dockone.io/uploads/article/20141229/b28a5a6c1709746deb0aa2530be49af1.png" alt="image-1.png" title="image-1.png" /></a></p>

<p>在讨论Docker组件和基本要素如何交互之前，让我们来谈谈Docker的支柱。Docker使用以下操作系统的功能来提高容器技术效率：</p>

<ul>
  <li><code class="highlighter-rouge">Namespaces</code> 充当隔离的第一级。确保一个容器中运行一个进程而且不能看到或影响容器外的其它进程。</li>
  <li><code class="highlighter-rouge">Control Groups</code>是LXC的重要组成部分，具有资源核算与限制的关键功能。</li>
  <li><code class="highlighter-rouge">UnionFS</code>（文件系统）作为容器的构建块。为了支持Docker的轻量级以及速度快的特性，它创建了用户层。</li>
</ul>

<h3 id="如何把它们放在一起运行任何应用程序都需要有两个基本步骤">如何把它们放在一起运行任何应用程序，都需要有两个基本步骤：</h3>

<ol>
  <li>构建一个镜像。</li>
  <li>运行容器。</li>
</ol>

<p>这些步骤都是从<code class="highlighter-rouge">Docker Client</code>的命令开始的。<code class="highlighter-rouge">Docker Client</code>使用的是Docker二进制文件。在基础层面上，<code class="highlighter-rouge">Docker Client</code>会告诉<code class="highlighter-rouge">Docker Daemon</code>需要创建的镜像以及需要在容器内运行的命令。当Daemon接收到创建镜像的信号后，会进行如下操作：</p>

<h4 id="第1步构建镜像如前所述docker-image是一个构建容器的只读模板它包含了容器启动所需的所有信息包括运行程序和配置数据">第1步：构建镜像如前所述，<code class="highlighter-rouge">Docker Image</code>是一个构建容器的只读模板，它包含了容器启动所需的所有信息，包括运行程序和配置数据。</h4>

<p>每个镜像都源于一个基本的镜像，然后根据Dockerfile中的指令创建模板。对于每个指令，在镜像上创建一个新的层面。</p>

<p>一旦镜像创建完成，就可以将它们推送到中央registry：<code class="highlighter-rouge">Docker Index</code>，以供他人使用。然而，<code class="highlighter-rouge">Docker Index</code>为镜像提供了两个级别的访问权限：公有访问和私有访问。你可以将镜像存储在私有仓库，Docker官网有私有仓库的套餐可以供你选择。总之，公有仓库是可搜索和可重复使用的，而私有仓库只能给那些拥有访问权限的成员使用。<code class="highlighter-rouge">Docker Client</code>可用于<code class="highlighter-rouge">Docker Index</code>内的镜像搜索。</p>

<h4 id="第2步运行容器运行容器源于我们在第一步中创建的镜像当容器被启动后一个读写层会被添加到镜像的顶层当分配到合适的网络和ip地址后需要的应用程序就可以在容器中运行了">第2步：运行容器运行容器源于我们在第一步中创建的镜像。当容器被启动后，一个读写层会被添加到镜像的顶层。当分配到合适的网络和IP地址后，需要的应用程序就可以在容器中运行了。</h4>

<p>如果你还是不太理解，先别急，在接下来的内容中我们将会和你分享很多的实战案例。</p>

<p>目前为止，我们已经介绍了Docker的基本概念，接下来，让我们一起安装Docker！</p>

<h3 id="安装docker快速指南下面让我们来看看如何在ubuntu-1204-lts上安装docker译者注在centos-65安装可以参考这里">安装Docker：快速指南下面让我们来看看如何在Ubuntu 12.04 LTS上安装Docker（译者注：在CentOS 6.5安装可以参考<a href="https://github.com/llitfkitfk/docker-tutorial-cn">这里</a>）：</h3>

<ol>
  <li>检查APT系统的HTTPS兼容性。如果usr/lib/apt/methods/https文件不存在，请安装<code class="highlighter-rouge">apt-transport-https</code>程序包。</li>
  <li>
    <p>在本地添加Docker Repositor密钥。</p>

    <p>Repository key: hkp://keyserver.ubuntu.com:80 –recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</p>
  </li>
  <li>添加Docker Repository到APT源列表。</li>
  <li>
    <p>安装lxc-Docker程序包。<br />
`sudo apt-get update</p>

    <p>sudo apt-get install lxc-docker`</p>
  </li>
  <li>验证所安装的内容。<br />
<code class="highlighter-rouge">sudo docker run -i -t ubuntu /bin/bash</code></li>
</ol>

<p><strong>原文链接：<a href="http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-1-an-introduction">Part 1: Introduction</a>（翻译：<a href="https://github.com/llitfkitfk">田浩浩</a> 审校：李颖杰）</strong></p>

<p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝<br />
<strong>译者介绍</strong><br />
<strong>田浩浩</strong>，<a href="http://sydney.edu.au/engineering/it/">悉尼大学USYD</a>硕士研究生，目前在珠海从事Android应用开发工作。业余时间专注Docker的学习与研究，希望通过<a href="http://dockerone.com/">DockerOne</a>把最新最优秀的译文贡献给大家，与读者一起畅游Docker的海洋。</p>

<hr />
<p><a href="http://dockerone.com/article/101">Docker入门教程（一）介绍</a><br />
<a href="http://dockerone.com/article/102">Docker入门教程（二）命令</a><br />
<a href="http://dockerone.com/article/103">Docker入门教程（三）DockerFile</a><br />
<a href="http://dockerone.com/article/104">Docker入门教程（四）Docker Registry</a><br />
<a href="http://dockerone.com/article/105">Docker入门教程（五）Docker安全</a><br />
<a href="http://dockerone.com/article/106">Docker入门教程（六）另外的15个Docker命令</a><br />
<a href="http://dockerone.com/article/107">Docker入门教程（七）Docker API</a><br />
<a href="http://dockerone.com/article/109">Docker入门教程（八）Docker Remote API</a><br />
<a href="http://dockerone.com/article/110">Docker入门教程（九）10个镜像相关的API</a></p>
:ET