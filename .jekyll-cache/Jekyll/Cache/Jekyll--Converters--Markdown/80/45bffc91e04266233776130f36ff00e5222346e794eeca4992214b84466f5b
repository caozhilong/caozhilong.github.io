I"@<h1 id="轻量级桌面应用开发nwjs之六">轻量级桌面应用开发nw.js之六</h1>

<h2 id="如何打包和分发您的应用程序">如何打包和分发您的应用程序</h2>

<h2 id="快速开始">快速开始</h2>

<p>  只需将文件与NW文件放在同一目录中，然后将其发送给用户。nw.exe和package.json应该在同一个目录下。</p>

<p>  <strong>在不同的操作系统上，分发方式不相同</strong></p>

<p>  在OSX上它是不同的：把你的应用程序的树放在一个名为nwjs.app/Contents/Resources/app.nw, 需要了解更多<a href="https://github.com/nwjs/nw.js/wiki/How-to-package-and-distribute-your-apps">请移步</a></p>

<h2 id="准备工作">准备工作</h2>

<p>  nw目录下，建立以下文件夹:</p>

<ul>
  <li><strong>node_modules</strong> —— 程序部署需要使用的node模块</li>
  <li><strong>plugins</strong> —— NPAPI 的插件，可</li>
</ul>

<p>  在下载nw的版本时，正式环境请不要使用snapshot</p>

<p>  <strong>注意:</strong>构建时为了保证平台无关性，请使用npm install安装配置文件依赖的库</p>

<blockquote>
  <p>Caution: do not assume your node_modules that target one platform work as is in all platforms. For instance node-email-templates has specific Windows &amp; Mac os x npm install commands. Besides, it requires python to install properly, which is not installed by default on Windows.</p>
</blockquote>

<blockquote>
  <p>As a rule of thumb npm install your package.json on each platform you target to ensure everything works as expected.</p>
</blockquote>

<h2 id="步骤1将完成的程序打成压缩包">步骤1：将完成的程序打成压缩包</h2>

<p>  由于我们的软件包系统与LÖVE类似，因此以下指南从Wiki中修改。</p>

<p>  <strong>注意将打成的zip文件，修改后缀名为.nw，至少需要包含以下三个部分:</strong></p>

<ul>
  <li>必须有一个package.json描述文件,此文件为程序依赖的清单文件</li>
  <li>package.json必须在要打包的应用程序的根目录下</li>
  <li>在zip文件和程序根目录区分大小写。对于Windows和Mac OS X用户,这种操作系统不区分文件大小写,单由于本质是web项目因此需要符合URI规范</li>
</ul>

<h2 id="创建nw文件的步骤"><strong>创建.nw文件的步骤:</strong></h2>

<h3 id="windows操作系统">Windows操作系统</h3>

<ol>
  <li>创建一个zip压缩文件</li>
  <li>将应用程序包含的文件全部打包到zip文件中，保留程序的目录结构，并且确保package.json文件位于ZIP的根目录下</li>
  <li>将zip压缩文件的后缀名修改为.nw。默认情况下，文件的后缀名会被操作系统隐藏，请自行设置</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zip <span class="nt">-q</span> <span class="nt">-r</span> file-explorer.zip file-explorer
</code></pre></div></div>
<h3 id="linux--os-x操作系统">Linux / OS X操作系统</h3>

<p>  从命令行进入到程序的根目录</p>

<ol>
  <li>切换到程序根目录下,<code class="highlighter-rouge">cd /project/my_app</code>`</li>
  <li>执行 <code class="highlighter-rouge">zip -r ../XXX.nw *</code></li>
  <li>将准备好的.nw文件放置在项目目录之外</li>
  <li>可以了</li>
</ol>

<h2 id="步骤2将应用程序打包成可执行文件">步骤2：将应用程序打包成可执行文件</h2>

<h3 id="方法1将应用程序打包成可执行文件">方法1：将应用程序打包成可执行文件</h3>

<h3 id="方法2从nw文件中创建可执行文件">方法2：从.nw文件中创建可执行文件</h3>

<p>  在了解终端用户为了运行应用程序需要做什么。如果用户单独得到.nw文件，需要用户具备.nw的运行环境才能执行。(此方式可能<strong>开发人员使用较多</strong>);</p>

<p>  除此之外，还有一个简单的方式，由系统开发人员将.nw文件和nw环境集成,打包成可执行文件,如exe</p>

<p>  <strong>在正常的生产环境下,建议将.nw文件和可选的nw环境集成,分发给用户</strong></p>

<p><strong>分发时需要注意两点:</strong></p>

<ul>
  <li>最终结果不会只有一个可执行文件,还必须在zip文件中包含一些DLL</li>
  <li>从合并结果得到的可执行文件任然可以通过winZip读取</li>
</ul>

<h3 id="windows操作系统-1">Windows操作系统</h3>

<p>  在windows上完成打包需要以下几部,在控制台输入:</p>

<pre><code class="language-cmd">copy /b nw.exe+helloworld.nw helloworld.exe
</code></pre>

<h3 id="windows操作系统-2">Windows操作系统</h3>

<h2 id="参考文献">参考文献</h2>

<p>https://github.com/nwjs/nw.js/wiki/How-to-package-and-distribute-your-apps</p>

<p>http://m.blog.csdn.net/zeping891103/article/details/52222554</p>
:ET