I"<h1 id="在应用中如何数据持久化">在应用中如何数据持久化</h1>

<h2 id="引言">引言</h2>

<p>  在本地应用中<strong>数据持久化</strong>是很常见的，++人们常使用嵌入外部数据库或写入txt文本的方式来保存数据++。然而，在node-webkit有更好的选择，你可以独立使用Web SQL Database, embedded databases, Web Storage 或者 Application Cache 而没有任何额外的依赖。</p>

<p>  此外，nw.js提供了<strong>App.dataPath</strong>的方法可以准确获取到应用存储在本地的数据位置。</p>

<h3 id="web-sql-database">Web SQL Database</h3>

<p>  <strong>Web SQL Database</strong>的API并不是HTM5规范的一部分而是自己拥有独立规范，它提供了一套使用SQL操作客户端数据库的方法。在介绍API之前，我们假设你基本熟悉SQL语句和用法。</p>

<p>  <strong>Web SQL Database</strong>的API在node-webkit中<strong>继承于sqlite</strong>，在使用上基本一致：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openDatabase：该方法用于打开数据库对象。

transaction：该方法赋予我们执行相关数据库语句或者回滚的能力。

executeSql：该方法用于执行数据库语句。

</code></pre></div></div>

<p>  如需要打开一个数据库，你可以使用一下代码：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">openDatabase</span><span class="p">(</span><span class="dl">'</span><span class="s1">mydb</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">1.0</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">my first database</span><span class="dl">'</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">);</span>
</code></pre></div></div>

<p>  方法中包含了4个参数，分别是<strong>数据库名称</strong>、<strong>版本号</strong>、<strong>数据库描述</strong>和<strong>数据库预估大小</strong>。如果你想打开一个并不存在的数据库，该方法将会自动创建一个新的数据库，同时在你使用完成后并++不需要关闭数据库++。</p>

<p>  创建一个表，插入数据和查询数据，你可以使用<strong>transaction</strong>和<strong>executeSql</strong>：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Create table and insert one line
db.transaction(function (tx) {
  tx.executeSql('CREATE TABLE IF NOT EXISTS foo (id unique, text)');
  tx.executeSql('INSERT INTO foo (id, text) VALUES (1, "synergies")');
  tx.executeSql('INSERT INTO foo (id, text) VALUES (2, "luyao")');
});

// Query out the data
db.transaction(function (tx) {
  tx.executeSql('SELECT * FROM foo', [], function (tx, results) {
    var len = results.rows.length, i;
    for (i = 0; i &lt; len; i++) {
      alert(results.rows.item(i).text);
    }
  });
});
</code></pre></div></div>
<p>  如果你想更深入了解Web SQL Database，可以参考：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://html5doctor.com/introducing-web-sql-databases/
</code></pre></div></div>

<p>  另外如果你需要了解++更多其他的DB存储++，如IndexedDB、PouchDB、EJDB、NeDB、LinvoDB、MarsDB、StoreDB和LowDB，你可以参考：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://github.com/nwjs/nw.js/wiki/Save-persistent-data-in-app
</code></pre></div></div>

<h3 id="web-storage">Web Storage</h3>

<p>  <strong>Web storage</strong>是一种简单地使用键值的存储方式，你可以像js对象一样直接使用它，++但是所有的数据都将会保存再你的硬盘里++。</p>

<p>  <strong>Web storage</strong>有两种存储类型，分别是：</p>

<ul>
  <li>
    <p><strong>localStorage</strong> ：++没有任何期限地存储数据++。</p>
  </li>
  <li>
    <p><strong>sessionStorage</strong> ：++只在本次应用中存储数据++，当应用关闭后所有数据自动销毁。</p>
  </li>
</ul>

<p>  它们的使用方法很简单，只需直接调用<strong>localStorage</strong> 对象或者<strong>sessionStorage</strong> 对象即可，如下：</p>

<p><strong>localStorage</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>localStorage.love = "luyao";
// Love lasts forever
console.log(localStorage.love);

//如需移除一个键值项，可以使用
localStorage.removeItem("love");

</code></pre></div></div>
<p><strong>sessionStorage</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sessionStorage.life = "";
// But life will have an end
console.log(sessionStorage.life);
</code></pre></div></div>

<p>  <strong>注意</strong>，想要使用<strong>Web storage</strong>来++存储大数据并不切合实际++，因为<strong>API调用时同步的</strong>，而且并<strong>没有索引查询</strong>，如果在++大量数据中执行相关操作将会变得非常的慢++。</p>

<h3 id="application-cache">Application Cache</h3>

<p>  HTML5<strong>支持应用缓存</strong>，这意味着可以在没有任何额外连接的情况下进行数据存储。使用<strong>Application Cache</strong></p>

<p>主要有以下++3个优势++：</p>

<ol>
  <li>离线浏览：用户可以在断网的情况下继续浏览数据。</li>
  <li>速度：使用Application Cache存储速度将会更快。</li>
  <li>减少服务器负载：从服务器上下载过的资源可以重复使用。</li>
</ol>

<p><strong>总结:</strong></p>

<p>  <strong>Application Cache</strong>的设计是++主要用于浏览器用户++，<strong>针对node-webkit用户</strong>最好还是使用上面介绍的两种存储方式，如果想要深入了解<strong>Application Cache</strong>，可以参考：http://www.w3schools.com/html/html5_app_cache.asp</p>

<h2 id="参考文献">参考文献</h2>

<p>http://m.blog.csdn.net/zeping891103/article/details/51085213</p>
:ET