<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CaoZhiLong Blog</title>
    <description>CaoZhiLong Think-life - 思考而创作. 记录, 学习, 成长。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 09 Aug 2018 15:14:15 +0800</pubDate>
    <lastBuildDate>Thu, 09 Aug 2018 15:14:15 +0800</lastBuildDate>
    <generator>Jekyll v3.7.2</generator>
    
      <item>
        <title>MinGW 编译zlib、libpng、libjpeg等</title>
        <description>&lt;h1 id=&quot;mingw-编译zliblibpnglibjpeg等&quot;&gt;MinGW 编译zlib、libpng、libjpeg等&lt;/h1&gt;

&lt;p&gt;2013年11月30日 00:41:23&lt;/p&gt;

&lt;p&gt;阅读数：17130&lt;/p&gt;

&lt;article&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-e2445db1a8.css&quot; /&gt;

    # MinGW

    这里使用的是Qt5自带的MinGw版本，将路径**D:\Qt\Qt5.1.0\Tools\mingw48_32\bin**加到&quot;环境变量&quot;→&quot;系统变量&quot;→&quot;Path&quot;  
    命令行输入：

    col 1 | col 2 | col 3 
    ----- | ----- | ------
    1   |         | gcc -v

    可看到gcc版本为：gcc version 4.8.0 (rev2, Built by MinGW-builds project)

    # MSYS

    下载地址：[](http://www.mingw.org/wiki/MSYS)http://www.mingw.org/wiki/MSYS  
    当前版本：1.0.11  
    一路安装下去即可

    # zlib

    下载地址：http://www.zlib.net/  
    当前版本：1.2.8  
    命令行输入：

    col 1    | col 2 | col 3                                                               
    -------- | ----- | --------------------------------------------------------------------
    1  

    2   |       | copy win32\makefile.gcc makefile.gcc  

    mingw32-make -f makefile.gcc

    生成libz.a文件

    # libpng

    下载地址：[](http://www.libpng.org/pub/png/libpng.html)http://www.libpng.org/pub/png/libpng.html  
    当前版本：1.6.6  
    打开scripts/makefile.gcc设置zlib路径：

    col 1    | col 2 | col 3                                             
    -------- | ----- | --------------------------------------------------
    1  

    2   |       | ZLIBINC = ../zlib-1.2.8  

    ZLIBLIB = ../zlib-1.2.8

    拷贝scripts/pnglibconf.h.prebuilt到源码目录，改名为pnglibconf.h  
    命令行输入：

    col 1    | col 2 | col 3                                                                 
    -------- | ----- | ----------------------------------------------------------------------
    1  

    2   |       | copy scripts\makefile.gcc makefile.gcc  

    mingw32-make -f makefile.gcc

    生成libpng.a文件

    # libjpeg

    下载地址：[](http://www.ijg.org/)http://www.ijg.org/  
    当前版本：9  
    打开MSYS (rxvt)，输入：

    col 1         | col 2 | col 3                                           
    ------------- | ----- | ------------------------------------------------
    1  

    2  

    3   |       | cd /f/mycode/mysvn/jpeg-9  

    ./configure  

    make

    若是出现以下错误：

    col 1    | col 2 | col 3                                                                                                                                  
    -------- | ----- | ---------------------------------------------------------------------------------------------------------------------------------------
    1  

    2   |       | jcapimin.c:127:1: error: conflicting types for 'jpeg_suppress_tables'  

     jpeg_suppress_tables (j_compress_ptr cinfo, boolean suppress)

    打开jconfig.h，增加以下定义：  

    col 1 | col 2 | col 3                     
    ----- | ----- | --------------------------
    1   |         | \#define HAVE_PROTOTYPES 1

    重新输入：

    col 1 | col 2 | col 3
    ----- | ----- | -----
    1   |         | make 

    在.libs文件夹下生成libjpeg.a文件

    # libtiff

    下载地址：[ftp://ftp.remotesensing.org/pub/libtiff](http://ftp//ftp.remotesensing.org/pub/libtiff)  
    当前版本：4.0.3  
    编译依赖zlib和libjpeg，打开jpeg-9/jconfig.h，定义如下：

    col 1    | col 2 | col 3                                                      
    -------- | ----- | -----------------------------------------------------------
    1  

    2   |       | \#define HAVE_UNSIGNED_CHAR  

    \#define HAVE_UNSIGNED_SHORT

    打开MSYS (rxvt)，输入：

    col 1 | col 2 | col 3                                                                                                                                                                                                        
    ----- | ----- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    1   |         | ./configure --with-zlib-include-dir=/f/mycode/mysvn/zlib-1.2.8 --with-zlib-lib-dir=/f/mycode/mysvn/zlib-1.2.8 --with-jpeg-include-dir=/f/mycode/mysvn/jpeg-9 --with-jpeg-lib-dir=/f/mycode/mysvn/jpeg-9/.libs

    接着输入：

    col 1 | col 2 | col 3
    ----- | ----- | -----
    1   |         | make 

    在libtiff/.libs文件夹下生成libtiff.a文件

    # libiconv&lt;br /&gt;

    下载地址：http://www.gnu.org/software/libiconv/  
    当前版本：1.14  
    打开MSYS (rxvt)，输入：

    col 1         | col 2 | col 3                                                  
    ------------- | ----- | -------------------------------------------------------
    1  

    2  

    3   |       | cd /f/mycode/mysvn/libiconv-1.14  

    ./configure  

    make

    在lib/.libs文件夹下生成libiconv-2.dll和libiconv.dll.a文件，这是动态库。

    # GLEW&lt;br /&gt;

    下载地址：[http://glew.sourceforge.net/](http://glew.sourceforge.net/index.html)  
    当前版本：1.10.0  
    打开Makefile，更改SYSTEM变量为：

    col 1 | col 2 | col 3          
    ----- | ----- | ---------------
    1   |         | SYSTEM ?= mingw

    命令行输入：

    col 1 | col 2 | col 3                   
    ----- | ----- | ------------------------
    1   |         | mingw32-make -f Makefile

    在lib文件夹生成libglew32.a、libglew32.dll.a和glew32.dll文件  
    MinGW使用-lxxx来链接库的时候，搜索库的顺序如下：

    col 1                        | col 2 | col 3                                                                                
    ---------------------------- | ----- | -------------------------------------------------------------------------------------
    1  

    2  

    3  

    4  

    5  

    6   |       | libxxx.dll.a   

    xxx.dll.a   

    libxxx.a   

    cygxxx.dll (*)   

    libxxx.dll   

    xxx.dll

    测试使用，新建Qt工程，pro内容如下：

    col 1                                                                                 | col 2 | col 3                                                                                                                                                                                                                                                                                                                                            
    ------------------------------------------------------------------------------------- | ----- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    1  

    2  

    3  

    4  

    5  

    6  

    7  

    8  

    9  

    10  

    11  

    12  

    13  

    14  

    15  

    16   |       | QT       += core  

    QT       -= gui  


    TARGET = testc11  

    CONFIG   += console  

    CONFIG   -= app_bundle  

    CONFIG   += c++11  


    TEMPLATE = app  

    \# 链接GLEW静态库版本时开启  

    \#DEFINES += GLEW_STATIC  INCLUDEPATH += E:/MyControl/glew-1.10.0/include  

    LIBS += -lglew32 -lopengl32 -LE:/MyControl/glew-1.10.0/lib  


    SOURCES += main.cpp

    main.cpp内容如下：

    col 1                                       | col 2 | col 3                                                                                                                                                                            
    ------------------------------------------- | ----- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    1  

    2  

    3  

    4  

    5  

    6  

    7  

    8  

    9   |       | \#include&quot;GL/glew.h&quot;  
    \#include &lt;QCoreApplication&gt;  

    int main(int argc, char \*argv[])  

    {  

        glewInit();  

        QCoreApplication a(argc, argv);  
    return a.exec();  

    }

    编译运行成功，它链接的是libglew32.dll.a，运行需要glew32.dll动态库支持。接下来测试链接静态库，取消pro文件里面的注释，然后将E:\MyControl\glew-1.10.0\lib文件夹下的libglew32.dll.a文件暂时移出此文件夹，以防止被链接到。重新编译运行，此时链接到了静态库libglew32.a文件。

    # libwebp&lt;br /&gt;

    下载地址：[](https://developers.google.com/speed/webp)https://developers.google.com/speed/webp  
    当前版本：0.3.1  
    打开makefile.unix文件，注释掉以下四行，如下：

    col 1              | col 2 | col 3                                                                                                                                                         
    ------------------ | ----- | --------------------------------------------------------------------------------------------------------------------------------------------------------------
    1  

    2  

    3  

    4   |       | \#EXTRA_FLAGS= -DWEBP_HAVE_PNG -DWEBP_HAVE_JPEG -DWEBP_HAVE_TIFF  

    \#DWEBP_LIBS= -lpng -lz  

    \#CWEBP_LIBS= $(DWEBP_LIBS) -ljpeg -ltiff  

    \#GIF_LIBS = -lgif

    命令行输入：

    col 1 | col 2 | col 3                        
    ----- | ----- | -----------------------------
    1   |         | mingw32-make -f makefile.unix

    在src文件夹下生成libwebp.a文件

    # libcurl

    下载地址：http://curl.haxx.se/  
    当前版本：7.33.0  
    命令行输入：

    col 1 | col 2 | col 3               
    ----- | ----- | --------------------
    1   |         | mingw32-make mingw32

    在lib文件夹下生成libcurl.a文件  
    测试静态库使用，新建Qt工程，pro内容如下：

    col 1                                                                           | col 2 | col 3                                                                                                                                                                                                                                                                                                                                 
    ------------------------------------------------------------------------------- | ----- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    1  

    2  

    3  

    4  

    5  

    6  

    7  

    8  

    9  

    10  

    11  

    12  

    13  

    14  

    15   |       | QT       += core  

    QT       -= gui  


    TARGET = testc11  

    CONFIG   += console  

    CONFIG   -= app_bundle  

    CONFIG   += c++11  


    TEMPLATE = app  


    DEFINES += CURL_STATICLIB  

    INCLUDEPATH += E:/MyControl/curl-7.33.0/include  

    LIBS += -LE:/MyControl/curl-7.33.0/lib -lcurl -lws2_32 -lwldap32  


    SOURCES += main.cpp

    main.cpp内容如下：

    col 1                                                                                                                                                         | col 2 | col
    ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----- |
    1  

    2  

    3  

    4  

    5  

    6  

    7  

    8  

    9  

    10  

    11  

    12  

    13  

    14  

    15  

    16  

    17  

    18  

    19  

    20  

    21  

    22  

    23  

    24  

    25  

    26  

    27  

    28   |       | \#include&quot;curl/curl.h&quot;  
    \#include &lt;QCoreApplication&gt;  

    int main(int argc, char \*argv[])  

    {  

        CURL *curl;  

        CURLcode res;  


        curl = curl_easy_init();  
    if(curl) {  

          curl_easy_setopt(curl, CURLOPT_URL, &quot;http://example.com&quot;);  
    /* example.com is redirected, so we tell libcurl to follow redirection */  

          curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);  

    /* Perform the request, res will get the return code */  

          res = curl_easy_perform(curl);  
    /* Check for errors */  
    if(res != CURLE_OK)  

            fprintf(stderr, &quot;curl_easy_perform() failed: %s\n&quot;,  

                    curl_easy_strerror(res));  

    /* always cleanup */  

          curl_easy_cleanup(curl);  

        }  


        QCoreApplication a(argc, argv);  
    return a.exec();  

    }

    编译运行，可见打印出了网页源码。

    # FreeType&lt;br /&gt;

    下载地址：[http://www.freetype.org](http://www.freetype.org/)  
    当前版本：2.5.0  
    打开MSYS (rxvt)，输入：

    col 1         | col 2 | col 3                                                              
    ------------- | ----- | -------------------------------------------------------------------
    1  

    2  

    3   |       | cd /e/mycontrol/freetype-2.5.0  

    ./configure --without-png  

    make

    在objs\.libs文件夹下生成libfreetype.a文件



    # 参考资料：

    1.在 mingw 下编译 libHaru http://kingsz1.iteye.com/blog/543787  
    2.NDK在windows下编译libpng [](http://www.scottcgi.com/2012/12/31/ndk%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91libpng/)http://www.scottcgi.com/2012/12/31/ndk%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91libpng/  
    3.mingw_how_to [](http://www.gaia-gis.it/spatialite-2.4.0/mingw_how_to.html)http://www.gaia-gis.it/spatialite-2.4.0/mingw_how_to.html  
    4.compile libjpeg with mingw [](http://stackoverflow.com/questions/13087749/compile-libjpeg-with-mingw)http://stackoverflow.com/questions/13087749/compile-libjpeg-with-mingw  
    5.Using ld, the Gnu Linker https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Using_ld_the_GNU_Linker/win32.html
&amp;lt;/article&amp;gt;
&lt;/QCoreApplication&gt;&lt;/QCoreApplication&gt;&lt;/article&gt;
</description>
        <pubDate>Wed, 13 Jun 2018 05:15:06 +0800</pubDate>
        <link>http://localhost:4000/2018/06/13/mingw-to-101/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/13/mingw-to-101/</guid>
        
        <category>Windows</category>
        
        <category>MinGW</category>
        
        
      </item>
    
      <item>
        <title>Docker入门教程（九）10个镜像相关的API</title>
        <description>&lt;h1 id=&quot;docker入门教程九10个镜像相关的api&quot;&gt;Docker入门教程（九）10个镜像相关的API&lt;/h1&gt;

&lt;p&gt;【编者的话】DockerOne组织翻译了Flux7的Docker入门教程，本文是系列入门教程的第九篇，重点介绍了镜像相关的Docker Remote API。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;http://dockerone.com/article/109&quot;&gt;Docker系列教程的上一篇文章&lt;/a&gt;中，我们讨论了Docker Remote API，并具体学习了有关容器的命令。在这篇文章中，我们将讨论有关镜像的命令。&lt;/p&gt;

&lt;h4 id=&quot;创建镜像镜像可以通过以下两种方式来创建&quot;&gt;创建镜像镜像可以通过以下两种方式来创建：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;从Registry中提取&lt;/li&gt;
  &lt;li&gt;导入镜像&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /images/create&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;截图示例：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/9b61ca28a6304c2b22b0ac857e22f556.jpg&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/9b61ca28a6304c2b22b0ac857e22f556.jpg&quot; alt=&quot;create-an-image.jpg&quot; title=&quot;create-an-image.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;利用容器创建镜像post-commit&quot;&gt;利用容器创建镜像&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /commit&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;截图示例：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/b26275055af860748014b7f5bd07f26a.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/b26275055af860748014b7f5bd07f26a.png&quot; alt=&quot;docker-create-image-from-container.png&quot; title=&quot;docker-create-image-from-container.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;获取镜像清单get-imagesjson&quot;&gt;获取镜像清单：&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /images/json&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;截图示例：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/849644ff1b956f0bf1b1de492117962b.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/849644ff1b956f0bf1b1de492117962b.png&quot; alt=&quot;docker-list-images.png&quot; title=&quot;docker-list-images.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;insert-a-file导入指定的路径文件&quot;&gt;Insert a File导入指定的路径文件：&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /images/(name)/insert&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;截图示例：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/406ee4ec49f0a106dbb40772783d8ddf.jpg&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/406ee4ec49f0a106dbb40772783d8ddf.jpg&quot; alt=&quot;docker-image-insert-file.jpg&quot; title=&quot;docker-image-insert-file.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;删除镜像delete-imagesname&quot;&gt;删除镜像：&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE /images/(name)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;截图示例：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/e53bfe8f65678b199f2dc295511a09c1.jpg&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/e53bfe8f65678b199f2dc295511a09c1.jpg&quot; alt=&quot;delete-an-image.jpg&quot; title=&quot;delete-an-image.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;推送镜像到registrypost-imagesnamepush&quot;&gt;推送镜像到Registry&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /images/(name)/push&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;截图示例：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/4c2d2ffd49920034120fd12a9eaf3bc5.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/4c2d2ffd49920034120fd12a9eaf3bc5.png&quot; alt=&quot;docker-push-image-to-remote-repo.png&quot; title=&quot;docker-push-image-to-remote-repo.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;tag镜像post-imagesnametag&quot;&gt;Tag镜像&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /images/(name)/tag&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;截图示例：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/852a699931fc9e26ee9627aa25500503.jpg&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/852a699931fc9e26ee9627aa25500503.jpg&quot; alt=&quot;tag-an-image_(1).jpg&quot; title=&quot;tag-an-image_(1).jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;搜索镜像get-imagessearch&quot;&gt;搜索镜像：&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /images/search&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;截图示例：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/683b844fe0c38e81b4426f32ca8170ac.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/683b844fe0c38e81b4426f32ca8170ac.png&quot; alt=&quot;docker-search-an-image.png&quot; title=&quot;docker-search-an-image.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;查看镜像历史get-imagesnamehistory&quot;&gt;查看镜像历史&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /images/(name)/history&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;截图示例：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/b1fe1c11c12a47c669ac6e9c34291c08.jpg&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/b1fe1c11c12a47c669ac6e9c34291c08.jpg&quot; alt=&quot;docker-get-image-history.jpg&quot; title=&quot;docker-get-image-history.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;构建镜像post-build&quot;&gt;构建镜像&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /build&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;截图示例：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/2acc13bd97695feafe8ba0298dfa77ab.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/2acc13bd97695feafe8ba0298dfa77ab.png&quot; alt=&quot;docker-build-image-from-dockerfile.png&quot; title=&quot;docker-build-image-from-dockerfile.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原文链接：&lt;a href=&quot;http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-9-10-docker-remote-api-commands-for-images&quot;&gt;10 Docker Remote API Commands for Images&lt;/a&gt;（翻译：&lt;a href=&quot;https://github.com/llitfkitfk&quot;&gt;田浩浩&lt;/a&gt; 审校：李颖杰）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝&lt;br /&gt;
&lt;strong&gt;译者介绍&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;田浩浩&lt;/strong&gt;，&lt;a href=&quot;http://sydney.edu.au/engineering/it/&quot;&gt;悉尼大学USYD&lt;/a&gt;硕士研究生，目前在珠海从事Android应用开发工作。业余时间专注Docker的学习与研究，希望通过&lt;a href=&quot;http://dockerone.com/&quot;&gt;DockerOne&lt;/a&gt;把最新最优秀的译文贡献给大家，与读者一起畅游Docker的海洋。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://dockerone.com/article/101&quot;&gt;Docker入门教程（一）介绍&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/102&quot;&gt;Docker入门教程（二）命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/103&quot;&gt;Docker入门教程（三）DockerFile&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/104&quot;&gt;Docker入门教程（四）Docker Registry&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/105&quot;&gt;Docker入门教程（五）Docker安全&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/106&quot;&gt;Docker入门教程（六）另外的15个Docker命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/107&quot;&gt;Docker入门教程（七）Docker API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/109&quot;&gt;Docker入门教程（八）Docker Remote API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/110&quot;&gt;Docker入门教程（九）10个镜像相关的API&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jun 2018 05:15:06 +0800</pubDate>
        <link>http://localhost:4000/2018/06/12/Docker-to-109/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/12/Docker-to-109/</guid>
        
        <category>Linux</category>
        
        <category>Docker</category>
        
        
      </item>
    
      <item>
        <title>Docker入门教程（八）Docker Remote API</title>
        <description>&lt;h1 id=&quot;docker入门教程八docker-remote-api&quot;&gt;Docker入门教程（八）Docker Remote API&lt;/h1&gt;

&lt;p&gt;【编者的话】DockerOne组织翻译了Flux7的Docker入门教程，本文是系列入门教程的第八篇，重点介绍了Docker Remote API。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;http://dockerone.com/article/107&quot;&gt;Docker系列教程的上一篇文章&lt;/a&gt;中，我们学习了Docker Hub 以及 Docker Registry API。在本文中，让我们来看看Docker Remote API。&lt;/p&gt;

&lt;h3 id=&quot;docker-remote-apidocker-remote-api是一个取代远程命令行界面rcli的rest-api本文中我们将使用命令行工具curl来处理url相关操作curl可以发送请求获取以及发送数据检索信息&quot;&gt;Docker Remote APIDocker Remote API是一个取代远程命令行界面（rcli）的REST API。本文中，我们将使用命令行工具cURL来处理url相关操作。cURL可以发送请求、获取以及发送数据、检索信息。&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;容器列表&lt;/strong&gt; 获取所有容器的清单：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /containers/json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/cebdf8a0ec432acb6efcc98574bf9a1f.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/cebdf8a0ec432acb6efcc98574bf9a1f.png&quot; alt=&quot;get-all-containers.png&quot; title=&quot;get-all-containers.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;创建新容器&lt;/strong&gt;。命令如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /containers/create&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/49c77d00ec9b521e5c3d7b715e58aa3f.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/49c77d00ec9b521e5c3d7b715e58aa3f.png&quot; alt=&quot;docker-create-container.png&quot; title=&quot;docker-create-container.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;监控容器&lt;/strong&gt;。使用容器id获取该容器底层信息：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /containers/(id)/json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/ce207b4461a35510b3ed98b7009ab784.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/ce207b4461a35510b3ed98b7009ab784.png&quot; alt=&quot;docker-inspect-a-container.png&quot; title=&quot;docker-inspect-a-container.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;进程列表&lt;/strong&gt;。获取容器内进程的清单：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /containers/(id)/top&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/ae392939024a57a3176148ff68c70c6d.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/ae392939024a57a3176148ff68c70c6d.png&quot; alt=&quot;docker-container-top.png&quot; title=&quot;docker-container-top.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;容器日志&lt;/strong&gt;。获取容器的标准输出和错误日志：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /containers/(id)/logs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/37fbc417b9219260a0bfbfabd4fcb092.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/37fbc417b9219260a0bfbfabd4fcb092.png&quot; alt=&quot;docker-container-logs.png&quot; title=&quot;docker-container-logs.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;导出容器&lt;/strong&gt;。导出容器内容：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /containers/(id)/export&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/31768d12720d605acd7c7af8775c6633.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/31768d12720d605acd7c7af8775c6633.png&quot; alt=&quot;docker-export-container.png&quot; title=&quot;docker-export-container.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;启动容器&lt;/strong&gt;。如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /containers/(id)/start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/dc2446fe85c0d1c5e32e382a15e492e7.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/dc2446fe85c0d1c5e32e382a15e492e7.png&quot; alt=&quot;docker-start-container.png&quot; title=&quot;docker-start-container.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;停止容器&lt;/strong&gt;。命令如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /containers/(id)/stop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/4f3a48a64f31e6295eae5628e0521ff6.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/4f3a48a64f31e6295eae5628e0521ff6.png&quot; alt=&quot;docker-stop-a-container.png&quot; title=&quot;docker-stop-a-container.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;重启容器&lt;/strong&gt;，如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /containers/(id)/restart&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/afaef4c51371556ff8d5a24fe0f4fd13.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/afaef4c51371556ff8d5a24fe0f4fd13.png&quot; alt=&quot;docker-restart-a-container.png&quot; title=&quot;docker-restart-a-container.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;终止容器&lt;/strong&gt;：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /containers/(id)/kill&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/69a286142c47869bd04513d7deb9cf8d.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/69a286142c47869bd04513d7deb9cf8d.png&quot; alt=&quot;docker-kill-a-container.png&quot; title=&quot;docker-kill-a-container.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;现在，我们已经带你走过了Docker API的第二站，&lt;a href=&quot;http://dockerone.com/article/110&quot;&gt;Docker系列教程的下一篇文章&lt;/a&gt;会介绍有关镜像的Docker Remote API命令。我们所有的Docker系列教程你都可以在&lt;a href=&quot;http://dockerone.com/topic/Docker%20Tutorial&quot;&gt;这里&lt;/a&gt;找到。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原文链接：&lt;a href=&quot;http://flux7.com/blogs/docker/docker-tutorial-series-part-8-docker-remote-api/&quot;&gt;Docker Remote API&lt;/a&gt;（翻译：&lt;a href=&quot;https://github.com/llitfkitfk&quot;&gt;田浩浩&lt;/a&gt; 审校：李颖杰）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝&lt;br /&gt;
&lt;strong&gt;译者介绍&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;田浩浩&lt;/strong&gt;，&lt;a href=&quot;http://sydney.edu.au/engineering/it/&quot;&gt;悉尼大学USYD&lt;/a&gt;硕士研究生，目前在珠海从事Android应用开发工作。业余时间专注Docker的学习与研究，希望通过&lt;a href=&quot;http://dockerone.com/&quot;&gt;DockerOne&lt;/a&gt;把最新最优秀的译文贡献给大家，与读者一起畅游Docker的海洋。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://dockerone.com/article/101&quot;&gt;Docker入门教程（一）介绍&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/102&quot;&gt;Docker入门教程（二）命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/103&quot;&gt;Docker入门教程（三）DockerFile&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/104&quot;&gt;Docker入门教程（四）Docker Registry&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/105&quot;&gt;Docker入门教程（五）Docker安全&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/106&quot;&gt;Docker入门教程（六）另外的15个Docker命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/107&quot;&gt;Docker入门教程（七）Docker API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/109&quot;&gt;Docker入门教程（八）Docker Remote API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/110&quot;&gt;Docker入门教程（九）10个镜像相关的API&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jun 2018 02:15:06 +0800</pubDate>
        <link>http://localhost:4000/2018/06/12/Docker-to-108/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/12/Docker-to-108/</guid>
        
        <category>Linux</category>
        
        <category>Docker</category>
        
        
      </item>
    
      <item>
        <title>Docker入门教程（七）Docker API</title>
        <description>&lt;h1 id=&quot;docker入门教程七docker-api&quot;&gt;Docker入门教程（七）Docker API&lt;/h1&gt;

&lt;p&gt;【编者的话】DockerOne组织翻译了Flux7的Docker入门教程，本文是系列入门教程的第七篇，重点介绍了Docker Registry API和Docker Hub API。&lt;/p&gt;

&lt;p&gt;纵观我们的Docker系列教程，我们已经讨论了很多重要的&lt;a href=&quot;http://dockerone.com/article/101&quot;&gt;Docker组件&lt;/a&gt;与&lt;a href=&quot;http://dockerone.com/article/102&quot;&gt;命令&lt;/a&gt;。在本文中，我们将继续深入学习Docker：剖析Docker APIs。&lt;/p&gt;

&lt;p&gt;Docker提供了很多的API以便用户使用。这些API包含四个方面：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker Registry API&lt;/li&gt;
  &lt;li&gt;Docker Hub API&lt;/li&gt;
  &lt;li&gt;Docker OAuth API&lt;/li&gt;
  &lt;li&gt;Docker Remote API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体到这篇文章，我们将讨论Docker Registry API以及Docker Hub API。&lt;/p&gt;

&lt;h3 id=&quot;docker-registry-apidocker-registry-api是docker-registry的rest-api它简化了镜像和仓库的存储该api不能访问用户帐户或者获得授权你可以阅读docker系列教程的第四章以了解更多有关registry的类型译者注docker中有几种不同的registry&quot;&gt;Docker Registry APIDocker Registry API是&lt;a href=&quot;http://dockerone.com/article/104&quot;&gt;Docker Registry&lt;/a&gt;的REST API，它简化了镜像和仓库的存储。该API不能访问用户帐户或者获得授权。你可以阅读&lt;a href=&quot;http://dockerone.com/article/104&quot;&gt;Docker系列教程的第四章&lt;/a&gt;，以了解更多有关Registry的类型（译者注：Docker中有几种不同的Registry）。&lt;/h3&gt;

&lt;h4 id=&quot;extract-image-layer取出镜像层&quot;&gt;Extract image layer:取出镜像层：&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /v1/images/(image_id)/layer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/c3fa5338078b6382860aa192cb2a149e.jpg&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/c3fa5338078b6382860aa192cb2a149e.jpg&quot; alt=&quot;get-image-layer.jpg&quot; title=&quot;get-image-layer.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;insert-image-layer插入镜像层&quot;&gt;Insert image layer:插入镜像层：&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT /v1/images/(image_id)/layer&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;retrieve-an-image检索镜像&quot;&gt;Retrieve an image:检索镜像:&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /v1/images/(image_id)/json&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;retrieve-roots-of-an-image检索根镜像&quot;&gt;Retrieve roots of an image:检索根镜像：&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /v1/images/(image_id)/ancestry&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;obtain-all-tags-or-specific-tag-of-a-repository获取库里所有的标签或者指定标签&quot;&gt;Obtain all tags or specific tag of a repository:获取库里所有的标签或者指定标签：&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /v1/repositories/(namespace)/(repository)/tags&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /v1/repositories/(namespace)/(repository)/tags/(tag*)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/fbc70362835df0d928037e1c48d5a452.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/fbc70362835df0d928037e1c48d5a452.png&quot; alt=&quot;docker-get-all-tags.png&quot; title=&quot;docker-get-all-tags.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;delete-a-tag删除标签&quot;&gt;Delete a tag:删除标签：&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE /v1/repositories/(namespace)/(repository)/tags/(tag*)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/081c691cc8c4672f55b8e9a77300c9ff.jpg&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/081c691cc8c4672f55b8e9a77300c9ff.jpg&quot; alt=&quot;delete-a-tag.jpg&quot; title=&quot;delete-a-tag.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;status-check-of-registryregistry状态检查&quot;&gt;Status check of registry:registry状态检查：&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /v1/_ping&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/0c2c1bbfc56599290e5e87c2d6627ddd.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/0c2c1bbfc56599290e5e87c2d6627ddd.png&quot; alt=&quot;registry-ping.png&quot; title=&quot;registry-ping.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;docker-hub-apidocker-hub-api是docker-hub的一个简单的rest-api再提醒一下请参考docker系列教程的第四篇文章了解docker-hubdocker-hub-通过管理校验checksums以及公共命名空间public-namespaces来控制着用户帐户和授权该api还支持有关用户仓库和library仓库的操作&quot;&gt;Docker Hub APIDocker Hub API是Docker Hub的一个简单的REST API。再提醒一下，请参考&lt;a href=&quot;http://dockerone.com/article/104&quot;&gt;Docker系列教程的第四篇文章&lt;/a&gt;了解Docker Hub。Docker Hub 通过管理校验（checksums）以及公共命名空间（public namespaces）来控制着用户帐户和授权。该API还支持有关用户仓库和library仓库的操作。&lt;/h3&gt;

&lt;p&gt;首先，让我们来看看特殊的library仓库（需要管理员权限）的命令：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;创建一个新的仓库&lt;/strong&gt;。使用以下命令可以创建新的library仓库：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT /v1/repositories/(repo_name)/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中，&lt;code class=&quot;highlighter-rouge&quot;&gt;repo_name&lt;/code&gt;是新的仓库名称。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;删除已经存在的仓库&lt;/strong&gt;。命令如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE /v1/repositories/(repo_name)/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中，&lt;code class=&quot;highlighter-rouge&quot;&gt;repo_name&lt;/code&gt;是要删除的仓库名称。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;更新仓库镜像&lt;/strong&gt;。命令如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT /v1/repositories/(repo_name)/images&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;从仓库中获取镜像&lt;/strong&gt;。命令如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /v1/repositories/(repo_name)/images&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;授权&lt;/strong&gt;。使用Token获取仓库授权，如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT /v1/repositories/(repo_name)/auth&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接下来，让我们来看看用户仓库的命令。library仓库与用户仓库命令之间的主要区别是命名空间的使用。&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;创建用户仓库&lt;/strong&gt;。命令如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT /v1/repositories/(namespace)/(repo_name)/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/df7fd7439120cdf59b7a206557b3525c.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/df7fd7439120cdf59b7a206557b3525c.png&quot; alt=&quot;create-user.png&quot; title=&quot;create-user.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;删除用户仓库&lt;/strong&gt;，命令如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE /v1/repositories/(namespace)/(repo_name)/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/b5392c054bf4b1e6e2d71cbd692a3d6b.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/b5392c054bf4b1e6e2d71cbd692a3d6b.png&quot; alt=&quot;docker-delete-a-repo.png&quot; title=&quot;docker-delete-a-repo.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;更新用户仓库镜像&lt;/strong&gt;，命令如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT /v1/repositories/(namespace)/(repo_name)/images&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/a59d0b89aecec2bba4ef2082ae2c4ba6.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/a59d0b89aecec2bba4ef2082ae2c4ba6.png&quot; alt=&quot;docker-update-image.png&quot; title=&quot;docker-update-image.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;从仓库中下载镜像&lt;/strong&gt;。如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /v1/repositories/(namespace)/(repo_name)/images&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/7a6c3bc989f3b256bcfd0c2a5ff82867.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/7a6c3bc989f3b256bcfd0c2a5ff82867.png&quot; alt=&quot;docker-get-user-images.png&quot; title=&quot;docker-get-user-images.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;验证用户登录&lt;/strong&gt;，如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /v1/users&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/0cecf1ebf42901f88ccc951362362452.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/0cecf1ebf42901f88ccc951362362452.png&quot; alt=&quot;docker-user-login.png&quot; title=&quot;docker-user-login.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;strong&gt;添加新用户&lt;/strong&gt;，命令如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /v1/users&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;strong&gt;更新用户信息&lt;/strong&gt;，如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT /v1/users/(username)/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;现在，我们已经走过了Docker API之旅的第一站，第二站是有关Docker OAuth以及Remote API的内容，我们将在&lt;a href=&quot;http://dockerone.com/article/109&quot;&gt;Docker系列教程的下一篇&lt;/a&gt;见。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原文链接：&lt;a href=&quot;http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-7-ultimate-guide-for-docker-apis&quot;&gt;Ultimate Guide for Docker APIs&lt;/a&gt;（翻译：&lt;a href=&quot;https://github.com/llitfkitfk&quot;&gt;田浩浩&lt;/a&gt; 审校：李颖杰）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝&lt;br /&gt;
&lt;strong&gt;译者介绍&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;田浩浩&lt;/strong&gt;，&lt;a href=&quot;http://sydney.edu.au/engineering/it/&quot;&gt;悉尼大学USYD&lt;/a&gt;硕士研究生，目前在珠海从事Android应用开发工作。业余时间专注Docker的学习与研究，希望通过&lt;a href=&quot;http://dockerone.com/&quot;&gt;DockerOne&lt;/a&gt;把最新最优秀的译文贡献给大家，与读者一起畅游Docker的海洋。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://dockerone.com/article/101&quot;&gt;Docker入门教程（一）介绍&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/102&quot;&gt;Docker入门教程（二）命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/103&quot;&gt;Docker入门教程（三）DockerFile&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/104&quot;&gt;Docker入门教程（四）Docker Registry&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/105&quot;&gt;Docker入门教程（五）Docker安全&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/106&quot;&gt;Docker入门教程（六）另外的15个Docker命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/107&quot;&gt;Docker入门教程（七）Docker API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/109&quot;&gt;Docker入门教程（八）Docker Remote API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/110&quot;&gt;Docker入门教程（九）10个镜像相关的API&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jun 2018 01:15:06 +0800</pubDate>
        <link>http://localhost:4000/2018/06/12/Docker-to-107/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/12/Docker-to-107/</guid>
        
        <category>Linux</category>
        
        <category>Docker</category>
        
        
      </item>
    
      <item>
        <title>Docker入门教程（六）另外的15个Docker命令</title>
        <description>&lt;h1 id=&quot;docker入门教程六另外的15个docker命令&quot;&gt;Docker入门教程（六）另外的15个Docker命令&lt;/h1&gt;

&lt;p&gt;【编者的话】DockerOne组织翻译了Flux7的Docker入门教程，本文是系列入门教程的第六篇，继续介绍Docker命令。之前的第二篇文章中我们就介绍了一些基本的Docker命令，本文过后，你将会接触到所有的Docker常用命令。努力学习吧。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;http://dockerone.com/article/102&quot;&gt;之前的文章&lt;/a&gt;中，我们介绍了15个Docker命令，并分享了它们的实践经验。在这篇文章中，我们将学习另外的15个Docker命令。它们分别是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;daemon&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Docker daemon是一个用于管理容器的后台进程。一般情况下，守护进程是一个长期运行的用来处理请求的进程服务。&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;参数用于运行后台进程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;如之前所讨论的，可以使用Dockerfile来构建镜像。简单的构建命令如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build [options] PATH | URL&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;还有一些Docker提供的额外选项，如：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;--rm=true&lt;/code&gt;表示构建成功后，移除所有中间容器&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;--no-cache=false&lt;/code&gt;表示在构建过程中不使用缓存&lt;/p&gt;

&lt;p&gt;下面是一张使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker build&lt;/code&gt;命令的截图。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/b886c21482ce9b3d4f4b8ce8b7e4e3c2.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/b886c21482ce9b3d4f4b8ce8b7e4e3c2.png&quot; alt=&quot;rer.png&quot; title=&quot;rer.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;attach&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Docker允许使用&lt;code class=&quot;highlighter-rouge&quot;&gt;attach&lt;/code&gt;命令与运行中的容器交互，并且可以随时观察容器內进程的运行状况。退出容器可以通过两种方式来完成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ctrl+C 直接退出&lt;/li&gt;
  &lt;li&gt;Ctrl-\ 退出并显示堆栈信息（stack trace）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;attach&lt;/code&gt;命令的语法是：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker attach container&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;下面是一张显示执行&lt;code class=&quot;highlighter-rouge&quot;&gt;attach&lt;/code&gt;命令的截图。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/fb7694fe535b1307fb13ef5800d4ae1d.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/fb7694fe535b1307fb13ef5800d4ae1d.png&quot; alt=&quot;docker-attach1.png&quot; title=&quot;docker-attach1.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;diff&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Docker提供了一个非常强大的命令&lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt;，它可以列出容器内发生变化的文件和目录。这些变化包括添加（A-add）、删除（D-delete）、修改（C-change）。该命令便于Debug，并支持快速的共享环境。&lt;/p&gt;

&lt;p&gt;语法是：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker diff container&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;截图显示&lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt;的执行。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/55423a2311f8dbc9cc0ecb8fa44cd46e.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/55423a2311f8dbc9cc0ecb8fa44cd46e.png&quot; alt=&quot;docker-diff.png&quot; title=&quot;docker-diff.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;events&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;打印指定时间内的容器的实时系统事件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;import&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Docker可以导入远程文件、本地文件和目录。使用HTTP的URL从远程位置导入，而本地文件或目录的导入需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;参数。从远程位置导入的语法是：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker import http://example.com/example.tar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;截图表示本地文件：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/767fdc7859e4122143137bd27f23b6c5.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/767fdc7859e4122143137bd27f23b6c5.png&quot; alt=&quot;docker-import.png&quot; title=&quot;docker-import.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;export&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt;命令用于将容器的系统文件打包成tar文件。&lt;/p&gt;

&lt;p&gt;下图描述了其执行过程：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/b28a3619ed457631111008351d3a4fc6.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/b28a3619ed457631111008351d3a4fc6.png&quot; alt=&quot;docker-export.png&quot; title=&quot;docker-export.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;cp&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;这个命令是从容器内复制文件到指定的路径上。语法如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker cp container:path hostpath.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;截图展示了&lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt;命令的执行。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/96c6492386810b96d2828bab3ba584c1.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/96c6492386810b96d2828bab3ba584c1.png&quot; alt=&quot;docker-cp.png&quot; title=&quot;docker-cp.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;login&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;此命令用来登录到Docker registry服务器，语法如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker login [options] [server]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如要登录自己主机的registry请使用：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker login localhost:8080&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/71d664cc74478a070f5ff4e3fa5fbd8a.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/71d664cc74478a070f5ff4e3fa5fbd8a.png&quot; alt=&quot;docker-login.png&quot; title=&quot;docker-login.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;inspect&lt;/strong&gt;：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker inspect&lt;/code&gt;命令可以收集有关容器和镜像的底层信息。这些信息包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;容器实例的IP地址&lt;/li&gt;
  &lt;li&gt;端口绑定列表&lt;/li&gt;
  &lt;li&gt;特定端口映射的搜索&lt;/li&gt;
  &lt;li&gt;收集配置的详细信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该命令的语法是：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect container/image&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/05f8d28bd41b32d6f9afb7e5d1713fb8.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/05f8d28bd41b32d6f9afb7e5d1713fb8.png&quot; alt=&quot;docker-inspect.png&quot; title=&quot;docker-inspect.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;kill&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;发送&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGKILL&lt;/code&gt;信号来停止容器的主进程。语法是：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker kill [options] container&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/16b0c61902a080cd715ab233e6aaea3b.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/16b0c61902a080cd715ab233e6aaea3b.png&quot; alt=&quot;docker-kill.png&quot; title=&quot;docker-kill.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;rmi&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;该命令可以移除一个或者多个镜像，语法如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker rmi image&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;镜像可以有多个标签链接到它。在删除镜像时，你应该确保删除所有相关的标签以避免错误。下图显示了该命令的示例。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/b7df2a18735558bd84f0475d523b2bd3.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/b7df2a18735558bd84f0475d523b2bd3.png&quot; alt=&quot;fz.png&quot; title=&quot;fz.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;wait&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;阻塞对指定容器的其它调用方法，直到容器停止后退出阻塞。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/cc0f9abfdd6e5989438fd5dccc844da5.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/cc0f9abfdd6e5989438fd5dccc844da5.png&quot; alt=&quot;docker-wait.png&quot; title=&quot;docker-wait.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;load&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;该命令从tar文件中载入镜像或仓库到&lt;code class=&quot;highlighter-rouge&quot;&gt;STDIN&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;截图显示载入&lt;code class=&quot;highlighter-rouge&quot;&gt;app_box.tar&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;STDIN&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/19ae48cf3ed13149d9da1762ea52d4c1.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/19ae48cf3ed13149d9da1762ea52d4c1.png&quot; alt=&quot;ff.png&quot; title=&quot;ff.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;save&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;，该命令保存镜像为tar文件并发送到&lt;code class=&quot;highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;。语法如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker save image&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;简单截图示例如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141230/3eee7939884dfa8574f2a336da40cf6b.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141230/3eee7939884dfa8574f2a336da40cf6b.png&quot; alt=&quot;docker-save.png&quot; title=&quot;docker-save.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;docker批量命令&quot;&gt;docker批量命令&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;docker批量删除镜像&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -q 只返回ID列&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;强制所有镜像删除&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rmi &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker images  &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://dockerone.com/article/107&quot;&gt;Docker系列教程的下一篇文章&lt;/a&gt;我们将探讨Docker APIs。&lt;br /&gt;
&lt;strong&gt;原文链接：&lt;a href=&quot;http://flux7.com/blogs/docker/docker-commands/&quot;&gt;Part 6: The Next 15 Commands&lt;/a&gt;（翻译：&lt;a href=&quot;https://github.com/llitfkitfk&quot;&gt;田浩浩&lt;/a&gt; 审校：李颖杰）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝&lt;br /&gt;
&lt;strong&gt;译者介绍&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;田浩浩&lt;/strong&gt;，&lt;a href=&quot;http://sydney.edu.au/engineering/it/&quot;&gt;悉尼大学USYD&lt;/a&gt;硕士研究生，目前在珠海从事Android应用开发工作。业余时间专注Docker的学习与研究，希望通过&lt;a href=&quot;http://dockerone.com/&quot;&gt;DockerOne&lt;/a&gt;把最新最优秀的译文贡献给大家，与读者一起畅游Docker的海洋。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://dockerone.com/article/101&quot;&gt;Docker入门教程（一）介绍&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/102&quot;&gt;Docker入门教程（二）命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/103&quot;&gt;Docker入门教程（三）DockerFile&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/104&quot;&gt;Docker入门教程（四）Docker Registry&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/105&quot;&gt;Docker入门教程（五）Docker安全&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/106&quot;&gt;Docker入门教程（六）另外的15个Docker命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/107&quot;&gt;Docker入门教程（七）Docker API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/109&quot;&gt;Docker入门教程（八）Docker Remote API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/110&quot;&gt;Docker入门教程（九）10个镜像相关的API&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jun 2018 00:15:06 +0800</pubDate>
        <link>http://localhost:4000/2018/06/12/Docker-to-106/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/12/Docker-to-106/</guid>
        
        <category>Linux</category>
        
        <category>Docker</category>
        
        
      </item>
    
      <item>
        <title>Docker入门教程（五）Docker安全</title>
        <description>&lt;h1 id=&quot;docker入门教程五docker安全&quot;&gt;Docker入门教程（五）Docker安全&lt;/h1&gt;

&lt;p&gt;【编者的话】DockOne组织翻译了Flux7的Docker入门教程，本文是系列入门教程的第五篇，介绍了Docker的安全问题，依然是老话重谈，入门者可以通过阅读本文快速了解。&lt;/p&gt;

&lt;p&gt;我们必须高度重视开源软件的安全问题，当开发者在使用Docker时，从本地构建应用程序到生产环境部署是没有任何差异的（译者注：作者的言外之意是更应该重视Docker的安全问题）。当Docker被越来越多的平台使用的时候，我们需要严格保证Docker作为一个项目或者平台的安全性。&lt;/p&gt;

&lt;p&gt;因此，我们决定在Docker系列教程的第五篇来讨论Docker安全性的相关问题以及为什么会它们影响到Docker的整体安全性。由于Docker是LXC的延伸，它也很容易使用LXC的安全特性。&lt;/p&gt;

&lt;p&gt;在本系列的&lt;a href=&quot;http://dockerone.com/article/101&quot;&gt;第一篇文章&lt;/a&gt;中，我们知道&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;命令可以用来运行容器。那运行这个命令后，Docker做了哪些具体的工作呢？具体如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;命令初始化。&lt;/li&gt;
  &lt;li&gt;Docker 运行 lxc-start 来执行run命令。&lt;/li&gt;
  &lt;li&gt;lxc-start 在容器中创建了一组namespace和Control Groups。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于那些不知道namespace和control groups的概念的读者，我在这里先给他们解释一下：namespace是隔离的第一级，容器是相互隔离的，一个容器是看不到其它容器内部运行的进程情况（译者注：namespace系列教程可以阅读DockerOne上的&lt;a href=&quot;http://dockerone.com/article/76&quot;&gt;系列教程&lt;/a&gt;）。每个容器都分配了单独的网络栈，因此一个容器不可能访问另一容器的sockets。为了支持容器之间的IP通信，您必须指定容器的公网IP端口。&lt;/p&gt;

&lt;p&gt;Control Groups是非常重要的组件，具有以下功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;负责资源核算和限制。&lt;/li&gt;
  &lt;li&gt;提供CPU、内存、I/O和网络相关的指标。&lt;/li&gt;
  &lt;li&gt;避免某种DoS攻击。&lt;/li&gt;
  &lt;li&gt;支持多租户平台。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;docker-daemon的攻击面docker-daemon以root权限运行这意味着有一些问题需要格外小心&quot;&gt;Docker Daemon的攻击面Docker Daemon以root权限运行，这意味着有一些问题需要格外小心。&lt;/h3&gt;

&lt;p&gt;下面介绍一些需要注意的地方：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当Docker允许与访客容器目录共享而不限制其访问权限时，Docker Daemon的控制权应该只给授权用户。&lt;/li&gt;
  &lt;li&gt;REST API支持Unix sockets，从而防止了cross-site-scripting攻击。&lt;/li&gt;
  &lt;li&gt;REST API的HTTP接口应该在可信网络或者VPN下使用。&lt;/li&gt;
  &lt;li&gt;在服务器上单独运行Docker时，需要与其它服务隔离。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一些关键的Docker安全特性包括：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;容器以非特权用户运行。&lt;/li&gt;
  &lt;li&gt;Apparmor、SELinux、GRSEC解决方案，可用于额外的安全层。&lt;/li&gt;
  &lt;li&gt;可以使用其它容器系统的安全功能。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;dockerio-api用于管理与授权和安全相关的几个进程docker提供rest-api以下表格列出了关于此api用于维护相关安全功能的一些命令&quot;&gt;Docker.io API用于管理与授权和安全相关的几个进程，Docker提供REST API。以下表格列出了关于此API用于维护相关安全功能的一些命令。&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141229/fada0eeeee2458801a269de8867d2514.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141229/fada0eeeee2458801a269de8867d2514.png&quot; alt=&quot;part-5-1.png&quot; title=&quot;part-5-1.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockerone.com/article/106&quot;&gt;Docker系列教程的下一篇文章中&lt;/a&gt;我们将继续探讨&lt;a href=&quot;http://dockerone.com/article/102&quot;&gt;前面第二篇文章&lt;/a&gt;中所讨论的Docker命令的进阶。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原文链接：&lt;a href=&quot;http://flux7.com/blogs/docker/docker-tutorial-series-part-5-docker-security/&quot;&gt;Part 5: Docker Security&lt;/a&gt;（翻译：&lt;a href=&quot;https://github.com/llitfkitfk&quot;&gt;田浩浩&lt;/a&gt; 审校：李颖杰）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝&lt;br /&gt;
&lt;strong&gt;译者介绍&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;田浩浩&lt;/strong&gt;，&lt;a href=&quot;http://sydney.edu.au/engineering/it/&quot;&gt;悉尼大学USYD&lt;/a&gt;硕士研究生，目前在珠海从事Android应用开发工作。业余时间专注Docker的学习与研究，希望通过&lt;a href=&quot;http://dockerone.com/&quot;&gt;DockerOne&lt;/a&gt;把最新最优秀的译文贡献给大家，与读者一起畅游Docker的海洋。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://dockerone.com/article/101&quot;&gt;Docker入门教程（一）介绍&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/102&quot;&gt;Docker入门教程（二）命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/103&quot;&gt;Docker入门教程（三）DockerFile&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/104&quot;&gt;Docker入门教程（四）Docker Registry&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/105&quot;&gt;Docker入门教程（五）Docker安全&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/106&quot;&gt;Docker入门教程（六）另外的15个Docker命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/107&quot;&gt;Docker入门教程（七）Docker API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/109&quot;&gt;Docker入门教程（八）Docker Remote API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/110&quot;&gt;Docker入门教程（九）10个镜像相关的API&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 11 Jun 2018 23:15:06 +0800</pubDate>
        <link>http://localhost:4000/2018/06/11/Docker-to-105/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/11/Docker-to-105/</guid>
        
        <category>Linux</category>
        
        <category>Docker</category>
        
        
      </item>
    
      <item>
        <title>Docker入门教程（一）介绍</title>
        <description>&lt;h1 id=&quot;docker入门教程四docker-registry&quot;&gt;Docker入门教程（四）Docker Registry&lt;/h1&gt;

&lt;p&gt;【编者的话】DockerOne组织翻译了Flux7的Docker入门教程，本文是系列入门教程的第四篇，介绍了Docker Registry，它是Docker中的重要组件。本文通过情景演绎的方式对其进行了介绍，图文并茂，强烈推荐读者阅读。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;http://dockerone.com/article/103&quot;&gt;Docker系列教程的上一篇文章&lt;/a&gt;中，我们讨论了Dockerfile的重要性并提供了一系列Dockerfile的命令，使镜像的自动构建更加容易。在这篇文章中，我们将介绍Docker的一个重要组件：Docker Registry。它是所有仓库（包括共有和私有）以及工作流的中央Registry。在深入Docker Registry之前，让我们先去看看一些常见的术语和与仓库相关的概念。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Repositories（仓库）可以被标记为喜欢或者像书签一样标记起来&lt;/li&gt;
  &lt;li&gt;用户可以在仓库下评论。&lt;/li&gt;
  &lt;li&gt;私有仓库和共有仓库类似，不同之处在于前者不会在搜索结果中显示，也没有访问它的权限。只有用户设置为合作者才能访问私有仓库。&lt;/li&gt;
  &lt;li&gt;成功推送之后配置&lt;a href=&quot;http://www.wikiwand.com/en/Webhook&quot;&gt;webhooks&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Docker Registry有三个角色，分别是index、registry和registry client。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;角色 1 – Index&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; 负责并维护有关用户帐户、镜像的校验以及公共命名空间的信息。它使用以下组件维护这些信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web UI&lt;/li&gt;
  &lt;li&gt;元数据存储&lt;/li&gt;
  &lt;li&gt;认证服务&lt;/li&gt;
  &lt;li&gt;符号化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这也分解了较长的URL，以方便使用和验证用户存储库。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;角色 2 –Registry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;registry&lt;/code&gt;是镜像和图表的仓库。然而，它没有一个本地数据库，也不提供用户的身份认证，由S3、云文件和本地文件系统提供数据库支持。此外，通过Index Auth service的Token方式进行身份认证。Registries可以有不同的类型。现在让我们来分析其中的几种类型：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sponsor Registry：第三方的registry，供客户和Docker社区使用。&lt;/li&gt;
  &lt;li&gt;Mirror Registry：第三方的registry，只让客户使用。&lt;/li&gt;
  &lt;li&gt;Vendor Registry：由发布Docker镜像的供应商提供的registry。&lt;/li&gt;
  &lt;li&gt;Private Registry：通过设有防火墙和额外的安全层的私有实体提供的registry。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;角色 3 –Registry Client&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Docker充当registry客户端来负责维护推送和拉取的任务，以及客户端的授权。&lt;/p&gt;

&lt;h4 id=&quot;docker-registry工作流程详解现在让我们讨论五种情景模式以便更好地理解docker-registry&quot;&gt;Docker Registry工作流程详解现在，让我们讨论五种情景模式，以便更好地理解Docker Registry。&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;情景A&lt;/strong&gt;：用户要获取并下载镜像。所涉及的步骤如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用户发送请求到index来下载镜像。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;index 发出响应，返回三个相关部分信息：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;该镜像所处的registry&lt;/li&gt;
      &lt;li&gt;该镜像包括所有层的校验&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;以授权为目的的Token&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;注意：当请求header里有X-Docker-Token时才会返回Token。而私人仓库需要基本的身份验证，对于公有仓库这一点不是强制性的。&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;用户通过响应后返回的Token和registry沟通，registry全权负责镜像，它用来存储基本的镜像和继承的层。&lt;/li&gt;
  &lt;li&gt;registry现在要与index证实该token是被授权的。&lt;/li&gt;
  &lt;li&gt;index会发送“true” 或者 “false”给registry，由此判定是否允许用户下载所需要的镜像。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141229/d801c6374f0e20c9902338b068618e13.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141229/d801c6374f0e20c9902338b068618e13.png&quot; alt=&quot;pull.png&quot; title=&quot;pull.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;情景B&lt;/strong&gt;：用户想要将镜像推送到registry中。其中涉及的步骤如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用户发送附带证书的请求到index要求分配库名。&lt;/li&gt;
  &lt;li&gt;在认证成功，命名空间可用之后，库名也被分配。index发出响应返回临时的token。&lt;/li&gt;
  &lt;li&gt;镜像连带token，一起被推送到registry中。&lt;/li&gt;
  &lt;li&gt;registry与index证实token被授权，然后在index验证之后开始读取推送流。&lt;/li&gt;
  &lt;li&gt;该index由Docker校验的镜像更新。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141229/f86f077fe4ce78f8829532070effc481.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141229/f86f077fe4ce78f8829532070effc481.png&quot; alt=&quot;push.png&quot; title=&quot;push.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;情景C&lt;/strong&gt;：用户想要从index或registry中删除镜像：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;index接收来自Docker一个删除库的信号。&lt;/li&gt;
  &lt;li&gt;如果index对库验证成功，它将删除该库，并返回一个临时的token。&lt;/li&gt;
  &lt;li&gt;registry现在接收到带有该token的删除信号。&lt;/li&gt;
  &lt;li&gt;registry与index核实该token，然后删除库以及所有与其相关的信息。&lt;/li&gt;
  &lt;li&gt;Docker现在通知有关删除的index，然后index移除库的所有记录。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141229/01fc34b06b8e36f5fc292e1d86590a7a.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141229/01fc34b06b8e36f5fc292e1d86590a7a.png&quot; alt=&quot;delete.png&quot; title=&quot;delete.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;情景D&lt;/strong&gt;：用户希望在没有index的独立模式中使用registry。&lt;/p&gt;

&lt;p&gt;使用没有index的registry，这完全由Docker控制，它最适合于在私有网络中存储镜像。registry运行在一个特殊的模式里，此模式限制了registry与Docker index的通信。所有有关安全性和身份验证的信息需要用户自己注意。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;情景E&lt;/strong&gt;：用户想要在有index的独立模式中使用registry。&lt;/p&gt;

&lt;p&gt;在这种情况下，一个自定义的index会被创建在私有网络里来存储和访问镜像的问题。然而，通知Docker有关定制的index是耗时的。 Docker提供一个有趣的概念chaining registries，从而，实现负载均衡和为具体请求而指定的registry分配。在接下来的Docker教程系列中，我们将讨论如何在上述每个情景中使用Docker Registry API ，以及深入了解Docker Security。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原文链接：&lt;a href=&quot;http://flux7.com/blogs/docker/docker-tutorial-series-part-4-registry-workflows/&quot;&gt;Part 4: Registry &amp;amp; Workflows&lt;/a&gt;（翻译：&lt;a href=&quot;https://github.com/llitfkitfk&quot;&gt;田浩浩&lt;/a&gt; 审校：李颖杰）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝&lt;br /&gt;
&lt;strong&gt;译者介绍&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;田浩浩&lt;/strong&gt;，&lt;a href=&quot;http://sydney.edu.au/engineering/it/&quot;&gt;悉尼大学USYD&lt;/a&gt;硕士研究生，目前在珠海从事Android应用开发工作。业余时间专注Docker的学习与研究，希望通过&lt;a href=&quot;http://dockerone.com/&quot;&gt;DockerOne&lt;/a&gt;把最新最优秀的译文贡献给大家，与读者一起畅游Docker的海洋。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://dockerone.com/article/101&quot;&gt;Docker入门教程（一）介绍&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/102&quot;&gt;Docker入门教程（二）命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/103&quot;&gt;Docker入门教程（三）DockerFile&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/104&quot;&gt;Docker入门教程（四）Docker Registry&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/105&quot;&gt;Docker入门教程（五）Docker安全&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/106&quot;&gt;Docker入门教程（六）另外的15个Docker命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/107&quot;&gt;Docker入门教程（七）Docker API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/109&quot;&gt;Docker入门教程（八）Docker Remote API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/110&quot;&gt;Docker入门教程（九）10个镜像相关的API&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jun 2018 21:15:06 +0800</pubDate>
        <link>http://localhost:4000/2018/06/11/Docker-to-104/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/11/Docker-to-104/</guid>
        
        <category>Linux</category>
        
        <category>Docker</category>
        
        
      </item>
    
      <item>
        <title>Docker入门教程（二）命令</title>
        <description>&lt;h1 id=&quot;docker入门教程二命令&quot;&gt;Docker入门教程（二）命令&lt;/h1&gt;

&lt;p&gt;【编者的话】DockerOne组织翻译了Flux7的Docker入门教程，本文是系列入门教程的第二篇，介绍了Docker的基本命令以及命令的用法和功能。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;http://dockerone.com/article/101&quot;&gt;Docker系列教程的第一篇文章&lt;/a&gt;中，我们了解了Docker的基础知识，知道了它是如何工作以及如何安装的。在这篇文章中，我们将学习15个Docker命令，并通过实践来学习它是如何工作的。&lt;/p&gt;

&lt;p&gt;首先，让我们通过下面的命令来检查Docker的安装是否正确：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
docker info   
&lt;/pre&gt;

&lt;p&gt;如果没有找到这条命令，则表示Docker安装错误。如果安装正确，则会输出类似下面的内容：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141229/68dab0635310f3b5405cb950b5cbb96b.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141229/68dab0635310f3b5405cb950b5cbb96b.png&quot; alt=&quot;docker-info.png&quot; title=&quot;docker-info.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;到这一步Docker里还没有镜像或是容器。所以，让我们通过使用命令预先构建的镜像来创建来一个：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
sudo docker pull busybox  
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141229/ebd90889c2d6e424753a10925ad83acc.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141229/ebd90889c2d6e424753a10925ad83acc.png&quot; alt=&quot;docker-pull-busybox.png&quot; title=&quot;docker-pull-busybox.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BusyBox是一个最小的Linux系统，它提供了该系统的主要功能，不包含一些与GNU相关的功能和选项。&lt;/p&gt;

&lt;p&gt;下一步我们将运行一个“Hello World”的例子，我们暂且叫它“Hello Docker”吧。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
docker run busybox /bin/echo Hello Docker  
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141229/327aae80228f58acad3d35167289be17.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141229/327aae80228f58acad3d35167289be17.png&quot; alt=&quot;hello-docker.png&quot; title=&quot;hello-docker.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;现在，让我们以后台进程的方式运行&lt;code class=&quot;highlighter-rouge&quot;&gt;hello docker&lt;/code&gt;：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
sample_job=$(docker run -d busybox /bin/sh -c &quot;while true; do echo Docker; sleep 1; done&quot;)  
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://dockone.io/uploads/article/20141229/fbda65537920ab24b9f7a198c71d2011.png&quot;&gt;&lt;img src=&quot;http://dockone.io/uploads/article/20141229/fbda65537920ab24b9f7a198c71d2011.png&quot; alt=&quot;docker-job.png&quot; title=&quot;docker-job.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sample_job&lt;/code&gt;命令会隔一秒打印一次Docker，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker logs&lt;/code&gt;可以查看输出的结果。如果没有给这个job起名字，那这个job就会被分配一个id，以后使用命令例如&lt;code class=&quot;highlighter-rouge&quot;&gt;docker logs&lt;/code&gt;查看日志就会变得比较麻烦。&lt;/p&gt;

&lt;p&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;docker logs&lt;/code&gt;命令来查看job的当前状态：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
docker logs $sample_job  
&lt;/pre&gt;

&lt;p&gt;所有Docker命令可以用以下命令查看：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
docker help  
&lt;/pre&gt;

&lt;p&gt;名为&lt;code class=&quot;highlighter-rouge&quot;&gt;sample_job&lt;/code&gt;的容器，可以使用以下命令来停止：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
docker stop $sample_job  
&lt;/pre&gt;

&lt;p&gt;使用以下命令可以重新启动该容器：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
docker restart $sample_job  
&lt;/pre&gt;

&lt;p&gt;如果要完全移除容器，需要先将该容器停止，然后才能移除。像这样：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
docker stop $sample_job  

docker rm $sample_job  
&lt;/pre&gt;

&lt;p&gt;将容器的状态保存为镜像，使用以下命令：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
docker commit $sample_job job1  
&lt;/pre&gt;

&lt;p&gt;注意，镜像名称只能取字符[a-z]和数字[0-9]。&lt;/p&gt;

&lt;p&gt;现在，你就可以使用以下命令查看所有镜像的列表：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
docker images  
&lt;/pre&gt;

&lt;p&gt;在&lt;a href=&quot;http://dockerone.com/article/101&quot;&gt;我们之前的Docker教程&lt;/a&gt;中，我们学习过镜像是存储在Docker registry。在registry中的镜像可以使用以下命令查找到：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
docker search (image-name)  
&lt;/pre&gt;

&lt;p&gt;查看镜像的历史版本可以执行以下命令：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
docker history (image_name)  
&lt;/pre&gt;

&lt;p&gt;最后，使用以下命令将镜像推送到registry：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
docker push (image_name)  
&lt;/pre&gt;

&lt;p&gt;非常重要的一点是，你必须要知道存储库不是根存储库，它应该使用此格式&lt;code class=&quot;highlighter-rouge&quot;&gt;(user)/(repo_name)&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;修改docker默认端口号&quot;&gt;修改docker默认端口号&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;CentOS 6&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CentOS 7设置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;在RHEL7中，您还可以 &lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/sysconfig/docker&lt;/code&gt;文件，而不是修改docker.service单元文件&lt;/del&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/sysconfig/docker&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Modify these options if you want to change the way the docker daemon runs&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--selinux-enabled&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; unix:///var/run/docker.sock &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; tcp://0.0.0.0:4243
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;找到systemd目录下docker.service文件,默认位置&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/lib/systemd/system/docker.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;编辑docker.service文件，找到[service]节点，找到ExecStart行&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Docker Application Container Engine
&lt;span class=&quot;nv&quot;&gt;Documentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://docs.docker.com
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;network.target docker.socket
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;notify
&lt;span class=&quot;nv&quot;&gt;EnvironmentFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-/run/flannel/docker
&lt;span class=&quot;nv&quot;&gt;WorkingDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/dockerd                 &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; tcp://0.0.0.0:4243                 &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; unix:///var/run/docker.sock                 &lt;span class=&quot;nt&quot;&gt;--selinux-enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;                 &lt;span class=&quot;nt&quot;&gt;--log-opt&lt;/span&gt; max-size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1g
&lt;span class=&quot;nv&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/kill &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; HUP
&lt;span class=&quot;c&quot;&gt;# Having non-zero Limit*s causes performance problems due to accounting overhead&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# in the kernel. We recommend using cgroups to do container-local accounting.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LimitNOFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;infinity
&lt;span class=&quot;nv&quot;&gt;LimitNPROC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;infinity
&lt;span class=&quot;nv&quot;&gt;LimitCORE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;infinity
&lt;span class=&quot;c&quot;&gt;# Uncomment TasksMax if your systemd version supports it.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Only systemd 226 and above support this version.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#TasksMax=infinity&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TimeoutStartSec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;c&quot;&gt;# set delegate yes so that systemd does not reset the cgroups of docker containers&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kill only the docker process, not all processes in the cgroup&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KillMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;process
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on-failure
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;刷新配置文件
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload //刷新上面的文件更改
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重启docker服务
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;验证端口是否打开
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netstat -l | grep 4243 //验证端口是否打开
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;从容器外部连接docker&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;从某个地方连接到docker主机，比如Jenkins Docker Plugin，即tcp：// &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;server_ip]：4243
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;如果要在容器外部访问，请开启防火墙4243端口&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a. 开启端口&lt;/strong&gt;
firewall-cmd –zone=public –add-port=80/tcp –permanent
 命令含义：
–zone #作用域
–add-port=80/tcp #添加端口，格式为：端口/通讯协议
–permanent #永久生效，没有此参数重启后失效
&lt;strong&gt;b. 重启防火墙&lt;/strong&gt;
firewall-cmd –reload&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 1、直接关闭防火墙&lt;/span&gt;
systemctl stop firewalld.service           &lt;span class=&quot;c&quot;&gt;#停止firewall&lt;/span&gt;
systemctl disable firewalld.service     &lt;span class=&quot;c&quot;&gt;#禁止firewall开机启动&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 2、设置 iptables service&lt;/span&gt;
yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;iptables-services

&lt;span class=&quot;c&quot;&gt;# 如果要修改防火墙配置，如增加防火墙端口3306&lt;/span&gt;
vi /etc/sysconfig/iptables 

&lt;span class=&quot;c&quot;&gt;# 增加规则&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; state &lt;span class=&quot;nt&quot;&gt;--state&lt;/span&gt; NEW &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 3306 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT

&lt;span class=&quot;c&quot;&gt;# 保存退出后&lt;/span&gt;
systemctl restart iptables.service &lt;span class=&quot;c&quot;&gt;#重启防火墙使配置生效&lt;/span&gt;
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;iptables.service &lt;span class=&quot;c&quot;&gt;#设置防火墙开机启动&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 最后重启系统使设置生效即可。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参见:(https://stackoverflow.com/questions/26166550/set-docker-opts-in-centos/44834532#44834532)&lt;/p&gt;

&lt;p&gt;这都是一些非常基本的Docker命令。在我们&lt;a href=&quot;http://dockerone.com/article/106&quot;&gt;Docker教程系列的第六章&lt;/a&gt;，我们将讨论如何使用Docker运行Python的Web应用程序，以及一些进阶的Docker命令。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原文链接：&lt;a href=&quot;http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-1-an-introduction&quot;&gt; Part 2: The 15 Commands&lt;/a&gt;（翻译：&lt;a href=&quot;https://github.com/llitfkitfk&quot;&gt;田浩浩&lt;/a&gt; 审校：李颖杰）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝&lt;br /&gt;
&lt;strong&gt;译者介绍&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;田浩浩&lt;/strong&gt;，&lt;a href=&quot;http://sydney.edu.au/engineering/it/&quot;&gt;悉尼大学USYD&lt;/a&gt;硕士研究生，目前在珠海从事Android应用开发工作。业余时间专注Docker的学习与研究，希望通过&lt;a href=&quot;http://dockerone.com/&quot;&gt;DockerOne&lt;/a&gt;把最新最优秀的译文贡献给大家，与读者一起畅游Docker的海洋。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://dockerone.com/article/101&quot;&gt;Docker入门教程（一）介绍&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/102&quot;&gt;Docker入门教程（二）命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/103&quot;&gt;Docker入门教程（三）DockerFile&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/104&quot;&gt;Docker入门教程（四）Docker Registry&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/105&quot;&gt;Docker入门教程（五）Docker安全&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/106&quot;&gt;Docker入门教程（六）另外的15个Docker命令&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/107&quot;&gt;Docker入门教程（七）Docker API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/109&quot;&gt;Docker入门教程（八）Docker Remote API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://dockerone.com/article/110&quot;&gt;Docker入门教程（九）10个镜像相关的API&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jun 2018 17:15:06 +0800</pubDate>
        <link>http://localhost:4000/2018/06/11/Docker-to-102/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/11/Docker-to-102/</guid>
        
        <category>Linux</category>
        
        <category>Docker</category>
        
        
      </item>
    
      <item>
        <title>Centos 6 To 7</title>
        <description>
&lt;h1 id=&quot;centos6x系统升级至centos7x系统&quot;&gt;CentOS6.x系统升级至CentOS7.x系统&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.51cto.com/feixiangyumao&quot;&gt;&lt;img src=&quot;http://ucenter.51cto.com/images/noavatar_middle.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.51cto.com/feixiangyumao&quot;&gt;zitonglianfei&lt;/a&gt;
								&lt;font class=&quot;comment_number&quot;&gt;0&lt;/font&gt;人评论&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;			[1530人阅读](javascript:;)
			[2017-12-10 10:22:06](javascript:;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;注1：网上有很多centos6升级到centos7的技术文，但基本会报错，或者升级时采用的源不支持，本文只是做一次整合，绕过错误和不能用于升级的源。

注2：不建议CentOS6.6+系统升级CentOS7，6.6以上的系统很多服务组件比7系统版本更新，可能会造成升级失败

注3：建议使用纯净版系统升级，第三方组件和服务越多，越容易失败
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;step1：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;[root@localhost ~]# cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; /etc/yum.repos.d/upgrade.repo
&amp;gt; [upgrade]
&amp;gt; name=upgrade
&amp;gt; baseurl=http://dev.centos.org/centos/6/upg/x86_64/
&amp;gt; enable=1
&amp;gt; gpgcheck=0
&amp;gt; EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;step2：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;[root@localhost ~]# yum install https://buildlogs.centos.org/centos/6/upg/x86_64/Packages/openscap-1.0.8-1.0.1.el6.centos.x86_64.rpm -y
注：必须安装openscap-1.0.8-1.0.1.el6.centos.x86_64.rpm这个包，不然肯定会报错
[root@localhost ~]# yum install preupgrade-assistant-contents redhat-upgrade-tool preupgrade-assistant -y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;step3：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;[root@localhost ~]# preupg -l
CentOS6_7
[root@localhost ~]# preupg -s CentOS6_7
显示如下截图为验证成功，可以升级
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://i2.51cto.com/images/blog/201712/10/d5a3df353083bca1b371bfdbdcbee5b1.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&quot; alt=&quot;CentOS6.x系统升级至CentOS7.x系统&quot; /&gt;&lt;/p&gt;

&lt;p&gt;step4：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;[root@localhost ~]# redhat-upgrade-tool --network 7 --instrepo=http://vault.centos.org/7.2.1511/os/x86_64/
建议只升级到7.2系统，如想使用最新的7.x系统，可以在升级7.2完成后使用update升级
当出现如下信息时，表示升级成功，重启系统即可
(265/266): zlib-1.2.7-13.el7.x86_64.rpm                                                                       |  89 kB     00:00    
(266/266): zlib-devel-1.2.7-13.el7.x86_64.rpm                                                                 |  49 kB     00:00     
testing upgrade transaction.
rpm transaction 100% [==============================================================================================================]
rpm install 100% [==================================================================================================================]
setting up system for upgrade Finished. Reboot to start upgrade.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：如升级的时候显示check字样，表示系统中存在很多第三方组件，可能会造成升级失败，可以使用如下方式升级，但可能会造成系统无法重启，不推荐&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;[root@localhost ~]# redhat-upgrade-tool --network 7 --instrepo=http://vault.centos.org/7.2.1511/os/x86_64/ --format
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 10 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/10/CentOs-6-to-7/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/10/CentOs-6-to-7/</guid>
        
        
      </item>
    
      <item>
        <title>Docker入门教程（三）Dockerfile</title>
        <description>&lt;h1 id=&quot;docker入门教程三dockerfile&quot;&gt;Docker入门教程（三）Dockerfile&lt;/h1&gt;

&lt;p&gt;【编者的话】DockerOne组织翻译了Flux7的Docker入门教程，本文是系列入门教程的第三篇，介绍了Dockerfile的语法，DockerOne目前在代码高亮部分还有些Bug，我们会尽快修复，目前在代码部分有会些字符会被转义。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;http://dockerone.com/article/102&quot;&gt;Docker系列教程的上一篇文章&lt;/a&gt;中，我们介绍了15个Docker命令，你应该对Docker有个大致的了解了。那15个命令在手动创建镜像时会用到，它们涵盖了镜像的创建、提交、搜索、pull和push的功能。&lt;/p&gt;

&lt;p&gt;现在问题来了，既然Docker能自动创建镜像，那为什么要选择耗时而又乏味的方式来创建镜像呢？&lt;/p&gt;

&lt;p&gt;Docker为我们提供了Dockerfile来解决自动化的问题。在这篇文章中，我们将讨论什么是Dockerfile，它能够做到的事情以及Dockerfile的一些基本语法。&lt;/p&gt;

&lt;h3 id=&quot;易于自动化的命令dockerfile包含创建镜像所需要的全部指令基于在dockerfile中的指令我们可以使用docker-build命令来创建镜像通过减少镜像和容器的创建过程来简化部署&quot;&gt;易于自动化的命令Dockerfile包含创建镜像所需要的全部指令。基于在Dockerfile中的指令，我们可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker build&lt;/code&gt;命令来创建镜像。通过减少镜像和容器的创建过程来简化部署。&lt;/h3&gt;

&lt;p&gt;Dockerfile支持支持的语法命令如下：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
INSTRUCTION argument  
&lt;/pre&gt;

&lt;p&gt;指令不区分大小写。但是，命名约定为全部大写。&lt;/p&gt;

&lt;p&gt;所有Dockerfile都必须以&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;命令开始。 &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;命令会指定镜像基于哪个基础镜像创建，接下来的命令也会基于这个基础镜像（译者注：CentOS和Ubuntu有些命令可是不一样的）。&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;命令可以多次使用，表示会创建多个镜像。具体语法如下：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
FROM &lt;image name=&quot;&quot;&gt;  
&amp;lt;/pre&amp;gt;  

例如：  

&lt;pre class=&quot;prettyprint&quot;&gt;
FROM ubuntu  
&lt;/pre&gt;  

上面的指定告诉我们，新的镜像将基于Ubuntu的镜像来构建。  

继`FROM`命令，DockefFile还提供了一些其它的命令以实现自动化。在文本文件或Dockerfile文件中这些命令的顺序就是它们被执行的顺序。  

让我们了解一下这些有趣的Dockerfile命令吧。  

1. MAINTAINER：设置该镜像的作者。语法如下：  

&lt;pre class=&quot;prettyprint&quot;&gt;
MAINTAINER &lt;author name=&quot;&quot;&gt;  
&amp;lt;/pre&amp;gt;  

2. RUN：在shell或者exec的环境下执行的命令。`RUN`指令会在新创建的镜像上添加新的层面，接下来提交的结果用在Dockerfile的下一条指令中。语法如下：  

&lt;pre class=&quot;prettyprint&quot;&gt;
RUN 《command》  
&lt;/pre&gt;  

3. ADD：复制文件指令。它有两个参数&lt;source /&gt;和&lt;destination&gt;。destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件。语法如下：  

&lt;pre class=&quot;prettyprint&quot;&gt;
ADD 《src》 《destination》  
&lt;/pre&gt;  

4. CMD：提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效。 CMD有三种形式：  

&lt;pre class=&quot;prettyprint&quot;&gt;
CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]  

CMD [&quot;param1&quot;,&quot;param2&quot;]  

CMD command param1 param2  
&lt;/pre&gt;  

5. EXPOSE：指定容器在运行时监听的端口。语法如下：  

&lt;pre class=&quot;prettyprint&quot;&gt;
EXPOSE &lt;port&gt;;  
&amp;lt;/pre&amp;gt;  

6. ENTRYPOINT：配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于`CMD`，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：  

&lt;pre class=&quot;prettyprint&quot;&gt;
ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;,&quot;param2&quot;]  

ENTRYPOINT command param1 param2  
&lt;/pre&gt;  

7. WORKDIR：指定`RUN`、`CMD`与`ENTRYPOINT`命令的工作目录。语法如下：  

&lt;pre class=&quot;prettyprint&quot;&gt;
WORKDIR /path/to/workdir  
&lt;/pre&gt;  

8. ENV：设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：  

&lt;pre class=&quot;prettyprint&quot;&gt;
ENV &lt;key&gt; &lt;value&gt;  
&amp;lt;/pre&amp;gt;  

9. USER：镜像正在运行时设置一个UID。语法如下：  

&lt;pre class=&quot;prettyprint&quot;&gt;
USER &lt;uid&gt;  
&amp;lt;/pre&amp;gt;  

10. VOLUME：授权访问从容器内到主机上的目录。语法如下：  

&lt;pre class=&quot;prettyprint&quot;&gt;
VOLUME [&quot;/data&quot;]  
&lt;/pre&gt;  

### Dockerfile最佳实践与使用的其他任何应用程序一样，总会有可以遵循的最佳实践。你可以阅读更多有关[Dockerfile的最佳实践](http://crosbymichael.com/dockerfile-best-practices.html)。  

以下是我们列出的基本的Dockerfile最佳实践：  

* 保持常见的指令像`MAINTAINER`以及从上至下更新Dockerfile命令;
* 当构建镜像时使用可理解的标签，以便更好地管理镜像;
* 避免在Dockerfile中映射公有端口;
* `CMD`与`ENTRYPOINT`命令请使用数组语法。  

在接下来的文章中，我们将讨论[Docker Registry及其工作流程](http://dockerone.com/article/104)。  

**原文链接：[Part 3: Automation is the word using Dockerfile](http://flux7.com/blogs/docker/docker-tutorial-series-part-3-automation-is-the-word-using-dockerfile/)（翻译：[田浩浩](https://github.com/llitfkitfk) 审校：李颖杰）**  

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝  
**译者介绍**  
**田浩浩**，[悉尼大学USYD](http://sydney.edu.au/engineering/it/)硕士研究生，目前在珠海从事Android应用开发工作。业余时间专注Docker的学习与研究，希望通过[DockerOne](http://dockerone.com/)把最新最优秀的译文贡献给大家，与读者一起畅游Docker的海洋。  

-----------------------------------------  
[Docker入门教程（一）介绍](http://dockerone.com/article/101)  
[Docker入门教程（二）命令](http://dockerone.com/article/102)  
[Docker入门教程（三）DockerFile](http://dockerone.com/article/103)  
[Docker入门教程（四）Docker Registry](http://dockerone.com/article/104)  
[Docker入门教程（五）Docker安全](http://dockerone.com/article/105)  
[Docker入门教程（六）另外的15个Docker命令](http://dockerone.com/article/106)  
[Docker入门教程（七）Docker API](http://dockerone.com/article/107)  
[Docker入门教程（八）Docker Remote API](http://dockerone.com/article/109)  
[Docker入门教程（九）10个镜像相关的API](http://dockerone.com/article/110)
&lt;/uid&gt;&lt;/pre&gt;&lt;/value&gt;&lt;/key&gt;&lt;/pre&gt;&lt;/port&gt;&lt;/pre&gt;&lt;/destination&gt;&lt;/author&gt;&lt;/pre&gt;&lt;/image&gt;&lt;/pre&gt;
</description>
        <pubDate>Fri, 08 Jun 2018 01:15:06 +0800</pubDate>
        <link>http://localhost:4000/2018/06/08/Docker-to-103/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/08/Docker-to-103/</guid>
        
        <category>Linux</category>
        
        <category>Docker</category>
        
        
      </item>
    
  </channel>
</rss>
