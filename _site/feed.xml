<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CaoZhiLong Blog</title>
    <description>CaoZhiLong Think-life - 思考而创作. 记录, 学习, 成长。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 29 Nov 2017 16:46:57 +0800</pubDate>
    <lastBuildDate>Wed, 29 Nov 2017 16:46:57 +0800</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>java+Opencv环境搭建</title>
        <description>&lt;h1 id=&quot;javaopencv环境搭建&quot;&gt;java+Opencv环境搭建&lt;/h1&gt;

&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;java环境为：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  Opencv版本为opencv2.4.4&lt;/p&gt;

&lt;p&gt;  按照上面的方法，在每次使用时都需要建立libs及其子文件夹，并需要添加各种jar文件，在OpenCV的官网上给出了配置流程：&lt;/p&gt;

&lt;p&gt;http://docs.opencv.org/2.4.4-beta/doc/tutorials/introduction/desktop_java/java_dev_intro.html&lt;/p&gt;

&lt;p&gt;1 创建一个Java项目：&lt;/p&gt;

&lt;p&gt;File -&amp;gt; New -&amp;gt; Java Project, 命名为”HelloCV”&lt;/p&gt;

&lt;p&gt;2 配置Java Build Path:&lt;/p&gt;

&lt;p&gt;2.1 右击项目 -&amp;gt; Build Path -&amp;gt; Configure Build Path -&amp;gt; Libraries -&amp;gt; Add Library&lt;/p&gt;

&lt;p&gt;2.2 选择 User Library，依次点击Next -&amp;gt; User Libraries -&amp;gt; New&lt;/p&gt;

&lt;p&gt;2.3 在弹出来的对话框中输入OpenCV-2.4.4，然后点击OK&lt;/p&gt;

&lt;p&gt;2.4 选择Add External JARs, 找到opencv-244.jar文件并添加&lt;/p&gt;

&lt;p&gt;（我的OpenCV2.4.4安装路径为：D:OpenCV-2.4.4&lt;/p&gt;

&lt;p&gt;opencv-244.jar文件的路径为：D:OpenCV-2.4.4opencvbuildjava）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.5 然后选择Native library location:(None),点击右侧Edit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;添加 D:OpenCV-2.4.4opencvbuildjavax86[此处版本跟随JDK的版本]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;然后点击OK，配置完毕(避免错误)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;输入测试代码&quot;&gt;输入测试代码：&lt;/h2&gt;
&lt;p&gt;  添加Java class文件，&lt;/p&gt;

&lt;p&gt;Main.java&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.opencv.core.Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.opencv.core.CvType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.opencv.core.Mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome to OpenCV &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NATIVE_LIBRARY_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eye&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CvType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CV_8UC1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;输出结果:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Welcome&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpenCV&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;11.0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;http://www.aizhuanji.com/a/DVZKg5nW.html&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Nov 2017 01:15:06 +0800</pubDate>
        <link>http://localhost:4000/2017/11/21/write-with-opencv-env/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/21/write-with-opencv-env/</guid>
        
        <category>OOA</category>
        
        <category>Tree</category>
        
        
      </item>
    
      <item>
        <title>ORACLE物化视图应用</title>
        <description>&lt;h1 id=&quot;oracle物化视图应用&quot;&gt;ORACLE物化视图应用&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;  物化视图是一种特殊的物理表，“物化”(Materialized)视图是相对普通视图而言的。普通视图是虚拟表，应用的局限性大，任何对视图的查询，Oracle都实际上转换为视图SQL语句的查询。这样对整体查询性能的提高，并没有实质上的好处。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1物化视图的类型on-demandon-commit&quot;&gt;1、物化视图的类型：++&lt;em&gt;ON DEMAND&lt;/em&gt;++、++&lt;em&gt;ON COMMIT&lt;/em&gt;++&lt;/h2&gt;
&lt;p&gt;  二者的区别在于刷新方法的不同，ON DEMAND顾名思义，仅在该物化视图“需要”被刷新了，才进行刷新(REFRESH)，即更新物化视图，以保证和基表数据的一致性；而ON COMMIT是说，一旦基表有了COMMIT，即事务提交，则立刻刷新，立刻更新物化视图，使得数据和基表一致。
 ##   2、ON DEMAND物化视图&lt;/p&gt;

&lt;p&gt;  物化视图的创建本身是很复杂和需要优化参数设置的，特别是针对大型生产数据库系统而言。但Oracle允许以这种最简单的，类似于普通视图的方式来做，所以不可避免的会涉及到默认值问题。也就是说Oracle给物化视图的重要定义参数的默认值处理是我们需要特别注意的。&lt;/p&gt;

&lt;p&gt;## 物化视图的特点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;物化视图在某种意义上说就是一个物理表(而且不仅仅是一个物理表)，这通过其可以被user_tables查询出来，而得到佐证；&lt;/li&gt;
  &lt;li&gt;物化视图也是一种段(segment)，所以其有自己的物理存储属性；&lt;/li&gt;
  &lt;li&gt;物化视图会占用数据库磁盘空间，这点从user_segment的查询结果，可以得到佐证；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;创建语句：&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;materialized&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mv_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;  默认情况下，如果没指定刷新方法和刷新模式，则Oracle默认为FORCE和DEMAND。&lt;/p&gt;

&lt;p&gt;### 物化视图的数据怎么随着基表而更新？&lt;/p&gt;

&lt;p&gt;  Oracle提供了两种方式，手工刷新和自动刷新，默认为手工刷新。也就是说，通过我们手工的执行某个Oracle提供的系统级存储过程或包，来保证物化视图与基表数据一致性。这是最基本的刷新办法了。自动刷新，其实也就是Oracle会建立一个job，通过这个job来调用相同的存储过程或包，加以实现。&lt;/p&gt;

&lt;p&gt;   ON DEMAND物化视图的特性及其和ON COMMIT物化视图的区别，即前者不刷新(手工或自动)就不更新物化视图，而后者不刷新也会更新物化视图，——只要基表发生了COMMIT。&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Sep 2017 18:15:06 +0800</pubDate>
        <link>http://localhost:4000/2017/09/01/writing-with-oracle-material/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/01/writing-with-oracle-material/</guid>
        
        <category>Oracle</category>
        
        <category>database</category>
        
        <category>SQL</category>
        
        
      </item>
    
      <item>
        <title>物化视图的快速刷新测试与物化视图日志</title>
        <description>&lt;h1 id=&quot;物化视图的快速刷新测试与物化视图日志&quot;&gt;物化视图的快速刷新测试与物化视图日志&lt;/h1&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;  一般在创建物化视图的时候，在数据量不大的时候，刷新的方式都是采用完全刷新的。随着系统的使用一些物化视图的源表的数据量在不断的增长，原本采用完全方式几秒就能刷新完成的物化视图，现在需要等待很久的时间才能刷新完成。其实物化视图从一开始就帮我们想好了解决方法：通过物化视图日志来实现物化视图的快速刷新；&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一物化视图日志的介绍&quot;&gt;一、物化视图日志的介绍&lt;/h2&gt;

&lt;h3 id=&quot;11-物化视图快速刷新的原理&quot;&gt;1.1 物化视图快速刷新的原理&lt;/h3&gt;

&lt;p&gt;  要先了解完全刷新的原理是先把物化视图的数据全部删除，然后再把基表的数据插入到物化视图中；但是当数据达到百万级别的数据时，如果源表更新了一条数据，完全刷新就得删除物化视图的所有数据再进行插入;&lt;/p&gt;

&lt;p&gt;  而快速刷新，会保留物化视图的数据，然后基表的所有数据的变更记录到物化视图日志中。这样如果源表数据还是百万级别，且这个时候更新了一条数据，物化视图刷新的过程中根据物化视图的日志，只要更新修改的那条特定记录，便可达到快速刷新的作用;&lt;/p&gt;

&lt;p&gt;  简单来讲，物化视图日志就是一个数据库引擎自动伟华的表，用来跟踪基表发生的变更；&lt;/p&gt;

&lt;h3 id=&quot;12-物化视图的刷新方式&quot;&gt;1.2 物化视图的刷新方式、&lt;/h3&gt;

&lt;p&gt;  我们知道如果需要进行快速刷新，则需要建立物化视图日志。Oracle物化视图日志根据不同物化视图的快速刷新的需要，可以建立为ROWID或PRIMARY KEY类型的。还可以选择是否包括SEQUENCE、INCLUDING NEW VALUES以及指定列的列表。&lt;/p&gt;

&lt;h2 id=&quot;二物化视图快速刷新的测试&quot;&gt;二、物化视图快速刷新的测试&lt;/h2&gt;

&lt;h3 id=&quot;21-创建一个基表&quot;&gt;2.1 创建一个基表&lt;/h3&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T_JOHN&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;VARCHAR2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SALE&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;VARCHAR2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TABLESPACE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USERS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RESULT_CACHE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;MODE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PCTUSED&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PCTFREE&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;INITRANS&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MAXTRANS&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;STORAGE&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;INITIAL&lt;/span&gt;          &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;NEXT&lt;/span&gt;             &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MINEXTENTS&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MAXEXTENTS&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;UNLIMITED&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PCTINCREASE&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BUFFER_POOL&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FLASH_CACHE&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CELL_FLASH_CACHE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NOCOMPRESS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NOCACHE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NOPARALLEL&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MONITORING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;22-创建物化视图mv_john&quot;&gt;2.2 创建物化视图MV_JOHN&lt;/h3&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MATERIALIZED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VIEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MV_JOHN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SALE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TABLESPACE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USERS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PCTUSED&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PCTFREE&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;INITRANS&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MAXTRANS&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;STORAGE&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;INITIAL&lt;/span&gt;          &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;NEXT&lt;/span&gt;             &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MINEXTENTS&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MAXEXTENTS&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;UNLIMITED&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PCTINCREASE&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BUFFER_POOL&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FLASH_CACHE&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CELL_FLASH_CACHE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NOCACHE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NOCOMPRESS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NOPARALLEL&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IMMEDIATE&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;USING&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INDEX&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TABLESPACE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USERS&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PCTFREE&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;INITRANS&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MAXTRANS&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;STORAGE&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;INITIAL&lt;/span&gt;          &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;NEXT&lt;/span&gt;             &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;MINEXTENTS&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;MAXEXTENTS&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;UNLIMITED&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;PCTINCREASE&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;BUFFER_POOL&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;FLASH_CACHE&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;CELL_FLASH_CACHE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;REFRESH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FAST&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEMAND&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROWID&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SALE&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T_JOHN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;23-创建物化视图日志&quot;&gt;2.3 创建物化视图日志&lt;/h3&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MATERIALIZED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VIEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T_JOHN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TABLESPACE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USERS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PCTUSED&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PCTFREE&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;INITRANS&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MAXTRANS&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;STORAGE&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;INITIAL&lt;/span&gt;          &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;NEXT&lt;/span&gt;             &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MINEXTENTS&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MAXEXTENTS&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;UNLIMITED&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PCTINCREASE&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BUFFER_POOL&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FLASH_CACHE&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CELL_FLASH_CACHE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NOCACHE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NOPARALLEL&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROWID&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*WITH ROWID*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;EXCLUDING&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
WITH ROWID：通过ROWID的方式，刷新物化视图；
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;24-以上完成后便可以在基表上面进行数据的修改&quot;&gt;2.4 以上完成后,便可以在基表上面进行数据的修改;&lt;/h3&gt;

&lt;p&gt;  运行手工刷新后，可以查看物化视图的数据也更新了；&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;Begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Dbms_mView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'MV_JOHN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;End&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;三物化视图管理&quot;&gt;三、物化视图管理&lt;/h2&gt;

&lt;h3 id=&quot;31-oracle提供了视图user_mview_logs可以查看用户下物化视图的刷新情况&quot;&gt;3.1 ORACLE提供了视图USER_MVIEW_LOGS可以查看，用户下物化视图的刷新情况&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.itpub.net/attachment/201411/12/12679300_1415783878KaT3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  物化视图日志的名称为MLOG$_后面跟基表的名称，如果表名的长度超过20位，则只取前20位，当截短后出现名称重复时，Oracle会自动在物化视图日志名称后面加上数字作为序号。&lt;/p&gt;

&lt;h3 id=&quot;32-mlog_t_wzq&quot;&gt;3.2 MLOG$_T_WZQ&lt;/h3&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;--这是一个primarykey的物化视图日志：&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;MLOG&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_T_WZQ&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
相关解释如下：
SNAPTIME$$：用于表示刷新时间。
DMLTYPE$$：用于表示DML操作类型，I表示INSERT，D表示DELETE，U表示UPDATE。
OLD_NEW$$：用于表示这个值是新值还是旧值。N（EW）表示新值，O（LD）表示旧值，U表示UPDATE操作。
CHANGE_VECTOR$$：表示修改矢量，用来表示被修改的是哪个或哪几个字段。
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;   当刷新完成后MLOG$_T_WZQ相应的日志也会被清除了,因为这些日志已经没有保存的必要了;&lt;/p&gt;

&lt;h2 id=&quot;四总结&quot;&gt;四、总结&lt;/h2&gt;
&lt;p&gt;  物化视图是一把利器，在调优的过程中会经常用到，快速刷新也只是物化视图众多功能中很小的一个，随着业务场景的增加和数据量的增长相信用到物化视图的地方也会越来越多；&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Sep 2017 18:15:06 +0800</pubDate>
        <link>http://localhost:4000/2017/09/01/writing-with-oracle-mat/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/01/writing-with-oracle-mat/</guid>
        
        <category>Oracle</category>
        
        <category>database</category>
        
        <category>SQL</category>
        
        
      </item>
    
      <item>
        <title>对于搜索服务器的选型</title>
        <description>&lt;p&gt;  最近在做项目的时候，需要用到搜索引擎，在开源的世界里面可以用的东西太多了，以至于在进行技术选型的时候，会产生迷茫。&lt;/p&gt;

&lt;p&gt;  遂求助于一位研究搜索多的好友，当初自己选择的时候想使用Solr,他推荐我使用&lt;a href=&quot;https://www.elastic.co/cn/products/elasticsearch&quot;&gt;elasticsearch&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;  经过查询资料，对比以上两种搜索引擎的工具的优缺点:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;elasticsearch的优缺点&quot;&gt;&lt;strong&gt;Elasticsearch的优缺点&lt;/strong&gt;:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Elasticsearch是分布式的。不需要其他组件，分发是实时的，被叫做”&lt;strong&gt;Push replication&lt;/strong&gt;”。&lt;/li&gt;
  &lt;li&gt;Elasticsearch 完全支持 Apache Lucene 的&lt;strong&gt;接近实时&lt;/strong&gt;的搜索。&lt;/li&gt;
  &lt;li&gt;处理&lt;strong&gt;多租户&lt;/strong&gt;（multitenancy）不需要特殊配置，而Solr则需要更多的高级设置。&lt;/li&gt;
  &lt;li&gt;Elasticsearch 采用 Gateway 的概念，使得完备份更加简单。&lt;/li&gt;
  &lt;li&gt;各节点组成&lt;strong&gt;对等&lt;/strong&gt;的网络结构，某些节点出现故障时会自动分配其他节点代替其进行工作。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;只有一名开发者（当前Elasticsearch GitHub组织已经不只如此，已经有了相当活跃的维护者）
2.还不够自动（不适合当前新的Index Warmup API）&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;solr的优缺点&quot;&gt;Solr的优缺点&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Solr有一个更大、更成熟的用户、开发和贡献者社区。&lt;/li&gt;
  &lt;li&gt;支持添加多种格式的索引，如：HTML、PDF、微软 Office 系列软件格式以及 JSON、XML、CSV 等纯文本格式。&lt;/li&gt;
  &lt;li&gt;Solr比较成熟、稳定。
不考虑建索引的同时进行搜索，速度更快。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;建立索引时，搜索效率下降，实时索引搜索效率不高。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;elasticsearch与solr的比较&quot;&gt;&lt;em&gt;Elasticsearch与Solr的比较&lt;/em&gt;&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;  当单纯的对已有数据进行搜索时，Solr更快。
&lt;img src=&quot;http://i.zhcy.tk/images/search_fresh_index_while_idle.png&quot; alt=&quot;Search Fesh Index While Idle&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;当理想状态下无索引搜索 
&lt;strong&gt;图中数值越大代表耗时越长，搜索效率越低&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  当实时建立索引时, Solr会产生io阻塞，查询性能较差, Elasticsearch具有明显的优势。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.zhcy.tk/images/search_fresh_index_while_indexing.png&quot; alt=&quot;search_fresh_index_while_indexing&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;当建立索引进行搜索 
&lt;strong&gt;图中数值越大代表耗时越长，搜索效率越低&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  随着数据量的增加，Solr的搜索效率会变得更低，而Elasticsearch却没有明显的变化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.zhcy.tk/images/search_fresh_index_while_indexing2.png&quot; alt=&quot;search_fresh_index_while_indexing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;综上所述，Solr的架构不适合实时搜索的应用。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;实际生产环境测试待测试&quot;&gt;&lt;strong&gt;实际生产环境测试&lt;/strong&gt;*(++待测试++)&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;  下图为将搜索引擎从Solr转到Elasticsearch以后的平均查询速度有了50倍的提升。
&lt;img src=&quot;http://i.zhcy.tk/images/average_execution_time.jpg&quot; alt=&quot;查询性能待验证&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;average_execution_time(平均执行时间)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;elasticsearch-与-solr-的比较总结&quot;&gt;Elasticsearch 与 Solr 的比较总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;二者安装都很简单；&lt;/li&gt;
  &lt;li&gt;Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;&lt;/li&gt;
  &lt;li&gt;Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；&lt;/li&gt;
  &lt;li&gt;Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；&lt;/li&gt;
  &lt;li&gt;Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;其他基于lucene的开源搜索引擎解决方案&quot;&gt;&lt;strong&gt;其他基于Lucene的开源搜索引擎解决方案&lt;/strong&gt;*&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;直接使用 &lt;a href=&quot;http://lucene.apache.org/&quot;&gt;Lucene&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;  &lt;strong&gt;说明&lt;/strong&gt; ： Lucene 是一个 &lt;strong&gt;JAVA&lt;/strong&gt; 搜索类库，它本身并不是一个完整的解决方案，需要额外的开发工作。&lt;/p&gt;

&lt;p&gt;  优点:
 成熟的解决方案，有很多的成功案例。apache 顶级项目，正在持续快速的进步。庞大而活跃的开发社区，大量的开发人员。它只是一个类库，有足够的定制和优化空间：经过简单定制，就可以满足绝大部分常见的需求；经过优化，可以支持 10亿+ 量级的搜索。&lt;/p&gt;

&lt;p&gt;  缺点 : 需要额外的开发工作。所有的扩展，分布式，可靠性等都需要自己实现；非实时，从建索引到可以搜索中间有一个时间延迟，而当前的“近实时”(Lucene Near Real Time search)搜索方案的可扩展性有待进一步完善。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Katta&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说明：基于 &lt;strong&gt;Lucene&lt;/strong&gt; 的，支持分布式，可扩展，具有容错功能，准实时的搜索方案&lt;/p&gt;

&lt;p&gt;优点：开箱即用，可以与 Hadoop 配合实现分布式。具备扩展和容错机制。&lt;/p&gt;

&lt;p&gt;缺点：只是搜索方案，建索引部分还是需要自己实现。在搜索功能上，只实现了最基本的需求。成功案例较少，项目的成熟度稍微差一些。因为需要支持分布式，对于一些复杂的查询需求，定制的难度会比较大。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://svn.apache.org/repos/asf/hadoop/mapreduce/trunk/src/contrib/index/README&quot;&gt;Hadoop contrib/index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说明：Map/Reduce 模式的，分布式建索引方案，可以跟 Katta 配合使用。&lt;/p&gt;

&lt;p&gt;优点：分布式建索引，具备可扩展性。&lt;/p&gt;

&lt;p&gt;缺点：只是建索引方案，不包括搜索实现。工作在批处理模式，对实时搜索的支持不佳。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sna-projects.com/&quot;&gt;LinkedIn 的开源方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说明：基于 Lucene 的一系列解决方案，包括 准实时搜索 zoie ，facet 搜索实现 bobo ，机器学习算法 decomposer ，摘要存储库 krati ，数据库模式包装 sensei 等等&lt;/p&gt;

&lt;p&gt;优点：经过验证的解决方案，支持分布式，可扩展，丰富的功能实现&lt;/p&gt;

&lt;p&gt;缺点：与 linkedin 公司的联系太紧密，可定制性比较差&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tjake/Lucandra&quot;&gt;Lucandra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说明：基于 Lucene，索引存在 cassandra 数据库中&lt;/p&gt;

&lt;p&gt;优点：参考 cassandra 的优点&lt;/p&gt;

&lt;p&gt;缺点：参考 cassandra 的缺点。另外，这只是一个 demo，没有经过大量验证&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/akkumar/hbasene&quot;&gt;HBasene&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说明：基于 Lucene，索引存在 HBase 数据库中&lt;/p&gt;

&lt;p&gt;优点：参考 HBase 的优点&lt;/p&gt;

&lt;p&gt;缺点：参考 HBase 的缺点。另外，在实现中，lucene terms 是存成行，但每个 term 对应的 posting lists 是以列的方式存储的。随着单个 term 的 posting lists 的增大，查询时的速度受到的影响会非常大&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Aug 2017 18:02:13 +0800</pubDate>
        <link>http://localhost:4000/2017/08/21/write-with-es/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/21/write-with-es/</guid>
        
        <category>search</category>
        
        <category>搜索引擎</category>
        
        <category>Elasticsearch</category>
        
        <category>Solr</category>
        
        
      </item>
    
      <item>
        <title>什么叫面向对象？什么叫对象</title>
        <description>&lt;h1 id=&quot;什么叫面向对象什么是对象&quot;&gt;什么叫面向对象？什么是对象?&lt;/h1&gt;
&lt;p&gt;  面试的时候，可能这是一道开放题，从二十世纪60年代后期面向对象编程语言Simula-67中首次引入了类和对象的概念。从二十世纪80年代中期器，人们开始注重面向对象分析和面向对象设计的研究，逐步形成了面向对象方法学。到20世纪90年代开始，面向对象方法学已经成为人们在开发软件时的首选。面向对象技术已经似乎成为当前最好的软件开发技术。&lt;/p&gt;

&lt;p&gt;  然而如何用&lt;a href=&quot;https://www.zhihu.com/question/19854505&quot;&gt;一句话&lt;/a&gt;说明什么是面向对象思想？&lt;/p&gt;

&lt;h4 id=&quot;引用milo-yip的回答&quot;&gt;引用Milo Yip的回答&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;把一组数据结构和处理他们的方法组成&lt;strong&gt;对象&lt;/strong&gt;(object),把相同行为的对象归纳为&lt;strong&gt;类&lt;/strong&gt;(class)，通过类的&lt;strong&gt;封装&lt;/strong&gt;(encapsulation)隐藏内部细节，通过&lt;strong&gt;继承&lt;/strong&gt;(inheritance)实现类的&lt;strong&gt;特化/泛化&lt;/strong&gt;(specialization/generalization)，通过&lt;strong&gt;多态&lt;/strong&gt;(polymorphissm)实现，基于对象类型的&lt;strong&gt;动态分派&lt;/strong&gt;(dynamic dispatch)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;面向对象编程中常见概念深入剖析&quot;&gt;面向对象编程中常见概念”深入“剖析&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://caozhilong.github.io/img/arct/post-arct-OO.jpg&quot; alt=&quot;面向对象编程中常见概念”深入“剖析&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;类的泛化generalization&quot;&gt;类的泛化（Generalization）&lt;/h2&gt;

&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;
&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;
&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;
&lt;p&gt;&amp;lt;font color=#0099ff size=7 face=”黑体”&amp;gt;color=#0099ff size=72 face=”黑体”&amp;lt;/font&amp;gt;
&amp;lt;font color=#00ffff size=72&amp;gt;color=#00ffff&amp;lt;/font&amp;gt;
&amp;lt;font color=gray size=72&amp;gt;color=gray&amp;lt;/font&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;泛化关系（Generalization)&lt;/strong&gt;:A是B和C的父类，B,C具有公共类（父类）A，说明A是B,C的一般化（概括，也称泛化）&lt;/p&gt;

&lt;p&gt;•  泛化关系(Generalization)也就是继承关系，也称为“is-a-kind-of”关系，泛化关系用于描述父类与子类之间的关系，父类又称作基类或超类，子类又称作派生类。在UML中，泛      化关系用带空心三角形的直线来表示。
•  在代码实现时，使用面向对象的继承机制来实现泛化关系，如在Java语言中使用extends关键字、在C++/C#中使用冒号“：”来实现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339064113_3688.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;```
// 类模板
template &amp;lt;class T1, class T2&amp;gt;
class A{
    T1 data1;
    T2 data2;
};&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;// 函数模板
template &lt;class T=&quot;&quot;&gt;
T max(const T lhs, const T rhs){   
    return lhs &amp;gt; rhs ? lhs : rhs;
}
```&lt;/class&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Aug 2017 01:15:06 +0800</pubDate>
        <link>http://localhost:4000/2017/08/20/what-is-oo/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/20/what-is-oo/</guid>
        
        <category>OOA</category>
        
        
      </item>
    
      <item>
        <title>理解RESTful架构和SOAP协议</title>
        <description>&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;

&lt;p&gt;W3C通常将Web服务定义为：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;一种软件系统，旨在通过网络支持互操作的机器间机器交互。 
Web API也称为服务器端Web API是定义的请求 - 响应消息系统的编程接口，通常以JSON或XML形式，通过Web公开 - 最常见的方式是使用基于HTTP的Web服务器。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是，到底什么是RESTful架构&lt;/p&gt;

&lt;h2 id=&quot;起源&quot;&gt;起源&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;REST&lt;/strong&gt;（英文：&lt;strong&gt;Representational State Transfer&lt;/strong&gt;，又称&lt;strong&gt;具象状态传输&lt;/strong&gt;）是Roy Thomas Fielding博士于2000年在他的博士论文[1] 中提出来的一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。&lt;/p&gt;

&lt;h2 id=&quot;优势&quot;&gt;优势&lt;/h2&gt;

&lt;p&gt;  目前在三种主流的Web服务实现方案中，因为REST模式与复杂的SOAP和XML-RPC相比更加简洁，越来越多的web服务开始采用REST分割设计和实现。例如，&lt;a href=&quot;https://zh.wikipedia.org/wiki/Amazon.com&quot;&gt;Amazon.com&lt;/a&gt;提供接近&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%9B%85%E8%99%8E&quot;&gt;REST&lt;/a&gt;风格的Web服务运行图书查询；雅虎提供的Web服务也是REST风格的。&lt;/p&gt;

&lt;h2 id=&quot;实现和标准&quot;&gt;实现和标准&lt;/h2&gt;

&lt;p&gt;首先针对web服务而言，是一种以服务为导向架构的技术，通过标准的web协议提供服务，目的是保证不同平台的应用服务可以互操作。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;根据W3C的定义，Web服务(Web service)应当是一个软件系统，用于支持不同机器之间进行互操作。网络服务通常是由很多歌应用程序接口(API)所组成，他们通过网络，例如国际互联网（Internet）的远程服务器，执行客户段提交的请求。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Restful架构主要的目的辨识不同软件/程序在网络(例如互联网)中传递信息。&lt;/p&gt;

&lt;p&gt;需要注意的是，REST是&lt;strong&gt;设计风格而不是标准&lt;/strong&gt;。REST通常基于使用HTTP，URI，和XML以及HTML这些现有的广泛流行的协议和标准。&lt;/p&gt;

&lt;p&gt;传输数据的过程，一般包括资源的定位，针对定位到的资源进行操作(通常有获取、创建、修改和删除操作)，然通过对应的操作进行执行，然后将数据进行组装展现。在Web服务中&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;资源是有URI来指定。&lt;/li&gt;
  &lt;li&gt;对资源的操作包括获取、创建、修改和删除，这些操作正好对应HTTP协议提供的GEP、POST、PUT和DELETE方法。&lt;/li&gt;
  &lt;li&gt;通过执行这些操作行为，对资源进行具体操作&lt;/li&gt;
  &lt;li&gt;资源的展现形式则是XML/JSON或者HTML，其取决与读者人还是机器，是消费web服务的客户软件还是web浏览器。当然也可以是任何其他的格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rest的要求&quot;&gt;REST的要求&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;客户端和服务器的结构(服务器架构要求Client-Server)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;通信只能由客户端单方面发起，表现为请求-响应的形式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;连接协议具有无状态性(所有的状态都保存在服务器端Stateless)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;通信的会话状态（Session State）应该全部由服务器负责维护。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;能够利用Cache机制增进性能(合理使用HTTP提供静态缓存)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;响应内容可以在通信链的某处被缓存，以改善网络效率。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;一致性的操作界面&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;通信链的组件之间通过统一的接口相互通信，以提高交互的可见性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;层次化的系统&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过限制组件的行为（即每个组件只能“看到”与其交互的紧邻层），将架构分解为若干等级的层。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;所需代码 - JavaScript（可选）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;支持通过下载并执行一些代码（例如Java Applet、Flash或JavaScript），对客户端的功能进行扩展。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;安全&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;此方面RESTful架构并未详细介绍。HTTP协议层提供两个简单的安全性，例如通过TLS的基本认证和通信加密。SOAP安全性通过WS-SECURITY进行了良好的标准化。HTTP并不安全。因此如果RESTful旭泰实现严格的安全性，必须要依赖传输协议实现。安全性并不是简单的认知和加密就可以解决的，还包括授权和完整性。当需要考虑此实现时，SOAP个人认为是最佳的考虑&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;综述&quot;&gt;综述&lt;/h2&gt;

&lt;p&gt;综合上面上述过程，我们总结下什么是RESTful架构&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 每一个URI代表一种资源
2. 客户端和服务器之间，传递对资源的操作
3. 客户单通过HTTP动词，对服务器段资源进行操作，实现状态转化。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;rest的优点&quot;&gt;REST的优点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;可更高效利用缓存来提高响应速度&lt;/li&gt;
  &lt;li&gt;通讯本身的无状态性可以让不同的服务器的处理一系列请求中的不同请求，提高服务器的扩展性&lt;/li&gt;
  &lt;li&gt;浏览器即可作为客户端，简化软件需求&lt;/li&gt;
  &lt;li&gt;相对于其他叠加在HTTP协议之上的机制，REST的软件依赖性更小&lt;/li&gt;
  &lt;li&gt;不需要额外的资源发现机制&lt;/li&gt;
  &lt;li&gt;在软件技术演进中的长期的兼容性更好&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;如何在web服务中使用这种架构&quot;&gt;如何在Web服务中使用这种架构&lt;/h2&gt;

&lt;p&gt;匹配REST设计风格的Web API成为RESTful API。它从一下三个方面对资源进行定义&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;直观简短的资源地址：URI 。比如:http://example.com/resources/（资源）&lt;/li&gt;
  &lt;li&gt;传输的资源：Web服务接受与返回的互联网媒体类型，比如：JSON，XML，YAML等。(展现)&lt;/li&gt;
  &lt;li&gt;对资源的操作：Web服务在该资源上所支持的一系列请求方法（比如：POST，GET，PUT或DELETE）。(操作动作)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;引用wiki上面的记录，现RESTful API时HTTP请求方法的典型用途&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;资源&lt;/th&gt;
      &lt;th&gt;GET&lt;/th&gt;
      &lt;th&gt;PUT&lt;/th&gt;
      &lt;th&gt;POST&lt;/th&gt;
      &lt;th&gt;DELETE&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;一组资源的URI，比如http://example.com/resources/&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;列出&lt;/strong&gt;URI，以及该资源组中每个资源的详细信息（后者可选）。&lt;/td&gt;
      &lt;td&gt;使用给定的一组资源&lt;strong&gt;替换&lt;/strong&gt;当前整组资源。&lt;/td&gt;
      &lt;td&gt;在本组资源中&lt;strong&gt;创建/追加&lt;/strong&gt;一个新的资源。该操作往往返回新资源的URL。&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;删除&lt;/strong&gt;整组资源&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;单个资源的URI，比如http://example.com/resources/142&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;获取&lt;/strong&gt;指定的资源的详细信息，格式可以自选一个合适的网络媒体类型（比如：XML、JSON等）&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;替换/创建&lt;/strong&gt;指定的资源。并将其追加到相应的资源组中。&lt;/td&gt;
      &lt;td&gt;把指定的资源当做一个资源组，并在其下&lt;strong&gt;*创建/追加&lt;/strong&gt;一个新的元素，使其隶属于当前资源。&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;删除&lt;/strong&gt;指定的元素。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;说明:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT和DELETE方法是幂等方法。GET方法是安全方法（不会对服务器端有修改，因此当然也是幂等的）。
不像基于SOAP的Web服务，RESTful Web服务并没有“正式”的标准[4]。这是因为REST是一种架构，而SOAP只是一个协议。虽然REST不是一个标准，但大部分RESTful Web服务实现会使用HTTP、URI、JSON和XML等各种标准。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;实现参考&quot;&gt;实现参考&lt;/h2&gt;

&lt;p&gt;例如，一个简单的网络商店应用，列举所有商品，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET http://www.store.com/products
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;呈现某一件商品，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET http://www.store.com/product/12345
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下单购买，&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST http://www.store.com/order
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//xml传输
&lt;span class=&quot;nt&quot;&gt;&amp;lt;purchase-order&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&amp;gt;&lt;/span&gt; ... &lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/purchase-order&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;//json传输&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;purchase-order&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;实现框架&quot;&gt;实现框架&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby on Rails1.2以后的版本支持REST model。&lt;/li&gt;
  &lt;li&gt;JBoss RESTEasyJBoss的REST实现&lt;/li&gt;
  &lt;li&gt;Node.js RESTful APINode.js实现RESTful API&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;h3 id=&quot;引用&quot;&gt;引用&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;https://zh.wikipedia.org/wiki/REST#.E8.A6.81.E7.82.B9.E5.8F.8A.E6.A0.87.E5.87.86&lt;/li&gt;
  &lt;li&gt;http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm Roy Thomas Fielding的博士论文《Architectural Styles and the Design of Network-based Software Architectures》&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;restful架构有一些典型的设计误区&quot;&gt;RESTful架构有一些典型的设计误区。&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;最常见的一种设计错误&lt;/strong&gt;，&lt;strong&gt;就是URI包含动词&lt;/strong&gt;。因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。&lt;/p&gt;

&lt;p&gt;举例来说，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。&lt;/p&gt;

&lt;p&gt;如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;　　POST /accounts/1/transfer/500/to/2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;　　POST /transaction HTTP/1.1
　　Host: 127.0.0.1
　　
　　from=1&amp;amp;to=2&amp;amp;amount=500.00
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另一个设计误区，就是在URI中加入版本号：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://www.example.com/app/1.0/foo
http://www.example.com/app/1.1/foo
http://www.example.com/app/2.0/foo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accept字段中进行区分（参见Versioning REST Services）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;　　Accept: vnd.example-com.foo+json; version=1.0
　　Accept: vnd.example-com.foo+json; version=1.1
　　Accept: vnd.example-com.foo+json; version=2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 21 Jan 2017 01:15:06 +0800</pubDate>
        <link>http://localhost:4000/2017/01/20/SOAPvsRestful/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/20/SOAPvsRestful/</guid>
        
        <category>OOA</category>
        
        <category>Tree</category>
        
        
      </item>
    
      <item>
        <title>UML图中类之间的关系:依赖,泛化,关联,聚合,组合,实现</title>
        <description>&lt;h5 id=&quot;一句话解释什么叫面向对象&quot;&gt;一句话解释什么叫面向对象？&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;把一组数据结构和处理他们的方法组成对象(object),把相同行为的对象归纳为类(class)，通过类的封装(encapsulation)隐藏内部细节，通过继承(inheritance)实现类的特化/泛化(specialization/generalization)，通过多态(polymorphissm)实现，基于对象类型的动态分派(dynamic dispatch)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;类与类图&quot;&gt;类与类图&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;类(Class)封装了数据和行为，是面向对象的重要组成部分，它是具有相同属性、操作、关系的对象集合的总称。&lt;/li&gt;
  &lt;li&gt;在系统中，每个类具有一定的职责，职责指的是类所担任的任务，即类要完成什么样的功能，要承担什么样的义务。一个类可以有多种职责，设计得好的类一般只有一种职责，在定义类的时候，将类的职责分解成为类的属性和操作（即方法）。=&lt;/li&gt;
  &lt;li&gt;类的属性即类的数据职责，类的操作即类的行为职责&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;一依赖关系dependence&quot;&gt;一、依赖关系(Dependence)&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;依赖关系&lt;/strong&gt;（Dependence）：假设A类的变化引起了B类的变化，则说名B类依赖于A类。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;依赖关系(Dependency) 是一种使用关系，特定事物的改变有可能会影响到使用该事物的其他事物，在需要表示一个事物使用另一个事物时使用依赖关系。&lt;strong&gt;大多数情况下，依       赖关系体现在某个类的方法使用另一个类的对象作为参数。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;在UML中，依赖关系用带箭头的虚线表示，由依赖的一方指向被依赖的一方。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339063909_4768.png&quot; alt=&quot;依赖关系&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;依赖关系有如下三种情况：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;A类是B类中的（某中方法的）局部变量；&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A类是B类方法当中的一个参数；&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A类向B类发送消息，从而影响B类发生变化；&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;二泛化关系generalization&quot;&gt;二、泛化关系（Generalization）&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;泛化关系（Generalization）&lt;/strong&gt;：A是B和C的父类，B,C具有公共类（父类）A，说明A是B,C的一般化（概括，也称泛化）&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;泛化关系(Generalization)也就是继承关系，也称为“is-a-kind-of”关系，泛化关系用于描述父类与子类之间的关系，父类又称作基类或超类，子类又称作派生类。在UML中，泛      化关系用带空心三角形的直线来表示。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在代码实现时，使用面向对象的继承机制来实现泛化关系，如在&lt;strong&gt;Java&lt;/strong&gt;语言中&lt;a href=&quot;&quot;&gt;使用extends关键字&lt;/a&gt;、在&lt;a href=&quot;&quot;&gt;C++/C#&lt;/a&gt; 中&lt;a href=&quot;&quot;&gt;使用冒号”:”&lt;/a&gt;来实现。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339064113_3688.png&quot; alt=&quot;泛化关系（Generalization）&quot; /&gt;&lt;/p&gt;

&lt;p&gt;    Java中的继承&lt;strong&gt;Extends&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;   
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;   
   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;   
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在UML当中，对泛化关系有三个要求：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;子类与父类应该完全一致，父类所具有的属性、操作，子类应该都有；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;子类中除了与父类一致的信息以外，还包括额外的信息；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以使用父类的实例的地方，也可以使用子类的实例；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;三关联关系association&quot;&gt;三、关联关系（Association）&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;关联关系（Association）&lt;/strong&gt;:类之间的联系，如客户和订单，每个订单对应特定的客户，每个客户对应一些特定的订单，再如篮球队员与球队之间的关联（下图所示）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339064197_2222.jpg&quot; alt=&quot;关联关系&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中，关联两边的”employee”和“employer”标示了两者之间的关系，而数字表示两者的关系的限制，是关联两者之间的多重性。通常有“&lt;em&gt;”（表示所有，不限），“1”（表示有且仅有一个），“0…”（表示0个或者多个），“0，1”（表示0个或者一个），“n…m”(表示n到m个都可以),“m…&lt;/em&gt;”（表示至少m个）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;关联关系(Association) 是类与类之间最常用的一种关系，它是一种结构化关系，&lt;strong&gt;用于表示一类对象与另一类对象之间有联系。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;在UML类图中，&lt;strong&gt;用实线连接有关联的对象所对应的类&lt;/strong&gt;，在使用Java、C#和C++等编程语言实现关联关系时，&lt;strong&gt;通常将一个类的对象作为另一个类的属性&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;在使用类图表示关联关系时可以&lt;strong&gt;在关联线上标注角色名&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;双向关联&lt;/strong&gt;: 默认情况下，关联是双向的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;    常见的Hibernate中多对多&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339064456_6833.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;单向关联&lt;/strong&gt;:类的关联关系也可以是&lt;a href=&quot;&quot;&gt;单向的&lt;/a&gt;，单向关联用&lt;a href=&quot;&quot;&gt;带箭头的实线&lt;/a&gt;表示.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;    常见的Hibernate中一对多，多对一&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339064543_2384.png&quot; alt=&quot;单项关联&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Address&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;3  &lt;strong&gt;自关联:&lt;/strong&gt; 在系统中可能会存在&lt;a href=&quot;&quot;&gt;一些类的属性对象类型为该类本身&lt;/a&gt;，这种特殊的关联关系称为自关联。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339064668_4517.png&quot; alt=&quot;自关联&quot; /&gt;&lt;/p&gt;

&lt;p&gt;    常见的如树结构&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;重数性关联:&lt;/strong&gt; 重数性关联关系又称为&lt;strong&gt;多重性关联关系(Multiplicity)&lt;/strong&gt;，表示一个类的对象与另一个类的对象连接的个数。在UML中多重性关系可以直接在关联直线上增加一个数字表示与之对应的另一个类的对象的个数。&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;表示方式&lt;/th&gt;
      &lt;th&gt;多重性说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1..1&lt;/td&gt;
      &lt;td&gt;表示另一个类的一个对象只与一个该类对象有关系&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0..*&lt;/td&gt;
      &lt;td&gt;表示另一个类的一个对象与零个或多个该类对象有关系&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1..*&lt;/td&gt;
      &lt;td&gt;表示另一个类的一个对象与一个或多个该类对象有关系&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0..1&lt;/td&gt;
      &lt;td&gt;表示另一个类的一个对象没有或只与一个该类对象有关系&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;m..n&lt;/td&gt;
      &lt;td&gt;表示另一个类的一个对象与最少m、最多n个该类对象有关系 (m&amp;lt;=n)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339064814_8559.png&quot; alt=&quot;1..1&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//1..1 0..n&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Form&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[];&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;四聚合关系aggregation&quot;&gt;四、聚合关系（Aggregation）&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;聚合关系（Aggregation）&lt;/strong&gt;:表示的是整体和部分的关系，&lt;strong&gt;*整体与部分&lt;/strong&gt; 可以分开.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;聚合关系(Aggregation) 表示一个&lt;strong&gt;整体与部分&lt;/strong&gt;的关系。通常在定义一个整体类后，再去分析这个整体类的组成结构，从而找出一些成员类，该整体类和成员类之间就形成了聚合   关系。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在聚合关系中，&lt;strong&gt;成员类是整体类的一部分&lt;/strong&gt;，即成员对象是整体对象的一部分，但是成员对象可以脱离整体对象独立存在。&lt;strong&gt;在UML中，聚合关系用带空心菱形的直线表示。&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;    常见的如为聚合关系，汽车是有方向盘，引擎，车轱辘，底盘等组成的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339065043_2919.png&quot; alt=&quot;聚合关系&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//聚合关系&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
      
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Engine&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如：电话机包括一个话筒&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   电脑包括键盘、显示器，一台电脑可以和多个键盘、多个显示器搭配，确定键盘和显示器是可以和主机分开的，主机可以选择其他的键盘、显示器组成电脑；
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339065099_3986.jpg&quot; alt=&quot;电脑聚合关系&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;五组合关系composition&quot;&gt;五、组合关系（Composition）&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;组合关系具有同生共死的特点，一个整体完蛋，部分也不能幸免；聚合关系没有&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;组合关系（Composition）&lt;/strong&gt;:也是整体与部分的关系，&lt;a href=&quot;组合关系和聚合关系的区别！！！&quot;&gt;但是整体与部分不可以分开&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;组合关系(Composition)&lt;/strong&gt;也表示类之间整体和部分的关系，但是组合关系&lt;strong&gt;中部分和整体具有统一的生存期&lt;/strong&gt;。一旦整体对象不存在，部分对象也将不存在，部分对象与整体对象之    间具有&lt;strong&gt;同生共死&lt;/strong&gt;的关系。&lt;/li&gt;
  &lt;li&gt;在组合关系中，成员类是整体类的一部分，而且整体类可以控制成员类的生命周期，即成员类的存在依赖于整体类。&lt;strong&gt;在UML中，组合关系用带实心菱形的直线表示。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339065205_1491.png&quot; alt=&quot;组合关系同生共死&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//人的头完蛋，嘴也就完蛋了&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Head&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mouth&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;mouth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mouth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mouth&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如：公司和部门，部门是部分，公司是整体，公司A的财务部不可能和公司B的财务部对换，就是说，公司A不能和自己的财务部分开； 人与人的心脏.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339065249_7771.jpg&quot; alt=&quot;桌子的桌面和桌腿的关系&quot; /&gt;&lt;/p&gt;

&lt;p&gt;桌子是由桌面和四个桌腿组成的，所以桌子 —-&amp;lt;&lt;strong&gt;实心&lt;/strong&gt;&amp;gt; 桌腿,桌子 —-&amp;lt;&lt;strong&gt;实心&lt;/strong&gt;&amp;gt; 桌面
桌子和四个桌腿有关系，和一个桌面有关系&lt;/p&gt;

&lt;h2 id=&quot;六实现关系implementation&quot;&gt;六、实现关系（Implementation)&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;实现关系（Implementation）&lt;/strong&gt;：是用来规定接口和实线接口的类或者构建结构的关系，接口是操作的集合，而这些操作就用于规定类或者构建的一种服务。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;接口之间也可以有与类之间关系类似的继承关系和依赖关系，但是接口和类之间还存在一种实现关系(Realization)，在这种关系中，类实现了接口，类中的操作实现了接口中所     声明的操作。&lt;a href=&quot;&quot;&gt;&lt;strong&gt;在UML中，类与接口之间的实现关系用带空心三角形的虚线来表示。&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201206/07/1339065434_3587.png&quot; alt=&quot;实现关系&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ship&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;   
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;   
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 22 Aug 2016 18:02:13 +0800</pubDate>
        <link>http://localhost:4000/2016/08/22/write-with-uml/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/08/22/write-with-uml/</guid>
        
        <category>设计模式</category>
        
        <category>Java</category>
        
        <category>OOA</category>
        
        <category>uml</category>
        
        <category>interface</category>
        
        
      </item>
    
      <item>
        <title>CopyOnWrite容器</title>
        <description>&lt;h1 id=&quot;copyonwrite容器&quot;&gt;CopyOnWrite容器&lt;/h1&gt;

&lt;h2 id=&quot;理论&quot;&gt;理论&lt;/h2&gt;
&lt;p&gt;Copy-On-Write简称COW，是一种程序设计中的优化策略。适用于&lt;strong&gt;读多写少&lt;/strong&gt;的场景。JDK1.5+里面的COW容器有两种:CopyOnWriteArrayList和CopyOnWriteArraySet，COW容器非常有用，可以在非常多的并发场景使用到。&lt;/p&gt;

&lt;h2 id=&quot;什么是copyonwrite容器&quot;&gt;什么是CopyOnWrite容器？&lt;/h2&gt;

&lt;p&gt;CopyOnWrite容器即&lt;strong&gt;写时复制&lt;/strong&gt;的容器。通俗的理解是当往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是可以对CopyOnWrite容器进行&lt;strong&gt;并发的读，而不需要加锁&lt;/strong&gt;，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。&lt;/p&gt;

&lt;h2 id=&quot;测试代码&quot;&gt;测试代码&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caozhilong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyonwrite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.concurrent.CopyOnWriteArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.concurrent.ExecutorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.concurrent.Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.concurrent.atomic.AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestCopyOnWriteArrayList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//最大线程数&lt;/span&gt;
	 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THREAD_POOL_MAX_NUM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
	
	 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CopyOnWriteArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
	
	
&lt;span class=&quot;c1&quot;&gt;//	@Test&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		 &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestCopyOnWriteArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THREAD_POOL_MAX_NUM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...... Line &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; ......&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    	
    	
        &lt;span class=&quot;n&quot;&gt;ExecutorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THREAD_POOL_MAX_NUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
       
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THREAD_POOL_MAX_NUM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
	



	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListReader&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		
		
	      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
	      
	      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;ListReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   
	            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
	      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
	      
	      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;ListReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   
	          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
	    	  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
	      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
	        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;  
	        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
	             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  
	                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  
	                 &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; : 读取线程 :  &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
	                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
	             &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
	        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	
    &lt;span class=&quot;cm&quot;&gt;/**
     * 写入线程
     * @author admin
     *
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListWriter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;ListWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  
                &lt;span class=&quot;c1&quot;&gt;//this.mList.remove(this.mIndex);  &lt;/span&gt;
            	 &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; : ==========写入线程 ========== :  &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
                 &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...... add &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; ......&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
             &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;测试结论&quot;&gt;测试结论：&lt;/h3&gt;
&lt;p&gt;CopyOnWrite可以适用于并发读多写少的场景&lt;/p&gt;

&lt;h3 id=&quot;分析写入的方法&quot;&gt;分析写入的方法&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;添加元素&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * CopyOnWriteArrayList在增加元素会加锁
 因此可以支持多个线程添加方法，不会产生索引冲突
 在添加元素时，会将原来的数据拷贝一份，新加入的元素会加在List的后面，添加完成后会将新数组的应用只会给原来的对象，并且触发垃圾回收
 *
 * @param e element to be appended to this list
 * @return &amp;lt;tt&amp;gt;true&amp;lt;/tt&amp;gt; (as specified by {@link Collection#add})
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReentrantLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newElements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;删除元素&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cm&quot;&gt;/**
     * Removes the element at the specified position in this list.
     * Shifts any subsequent elements to the left (subtracts one from their
     * indices).  Returns the element that was removed from the list.
     *
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReentrantLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numMoved&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numMoved&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;setArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newElements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arraycopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arraycopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;numMoved&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;setArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReentrantLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Copy while searching for element to remove&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// This wins in the normal case of element being present&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newElements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// found one;  copy remaining and exit&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;newElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;setArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;newElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// special handling for last cell&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;setArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;分析读取的方法&quot;&gt;分析读取的方法&lt;/h3&gt;

&lt;p&gt;读取元素的时候并未对方法加锁，只有最后一致性，当读取原数组时，另外一个线程产生写入操作且写入操作并未完成时，会产生读取的值还是原来数组中的值，&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    // Positional Access Operations

    @SuppressWarnings(&quot;unchecked&quot;)
    private E get(Object[] a, int index) {
        return (E) a[index];
    }

    /**
     * {@inheritDoc}
     *
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public E get(int index) {
        return get(getArray(), index);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;所以我们可以看到，其实读取的时候是没有加锁的。&lt;/p&gt;

&lt;p&gt;最后我们再来看一下CopyOnWriteArrayList的优点和缺点:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;解决的开发工作中的多线程的并发问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;内存占有问题:很明显，两个数组同时驻扎在内存中，如果实际应用中，数据比较多，而且比较大的情况下，占用内存会比较大，针对这个其实可以用ConcurrentHashMap来代替。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据一致性:CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性(读不加锁的原因)。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;使用场景&quot;&gt;使用场景&lt;/h3&gt;

&lt;p&gt;CopyOnWrite并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景。&lt;/p&gt;

&lt;p&gt;使用CopyOnWriteMap需要注意两件事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;减少扩容开销。根据实际需要，初始化CopyOnWriteMap的大小，避免写时CopyOnWriteMap扩容的开销。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用批量添加。因为每次添加，容器每次都会进行复制，所以减少添加次数，可以减少容器的复制次数。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 22 Feb 2016 18:15:06 +0800</pubDate>
        <link>http://localhost:4000/2016/02/22/concurrent-CopyOnWrite/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/02/22/concurrent-CopyOnWrite/</guid>
        
        <category>Concurrent</category>
        
        <category>Atomic</category>
        
        <category>CopyOnWrite</category>
        
        
      </item>
    
      <item>
        <title>原子变量与非阻塞同步机制</title>
        <description>&lt;h1 id=&quot;原子变量与非阻塞同步机制&quot;&gt;原子变量与非阻塞同步机制&lt;/h1&gt;

&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;

&lt;p&gt;  在java.util.concurrent包中的许多类，例如Semaphore和ConcurrentLinkedQueue都提供了比synchronized机制更高的性能和可伸缩性。&lt;/p&gt;

&lt;p&gt;  近年来，在并发算法领域的大多数研究都侧重与非阻塞算法，这种算法用底层的原子机器指令(例如比较并交换指定)代替锁来确保数据在并发访问中的一致性。非阻塞算法被广泛应用在操作系统和JVM实现&lt;strong&gt;线程/进程调度机制&lt;/strong&gt;、垃圾回收机制以及锁和其他并发数据结构。&lt;/p&gt;

&lt;p&gt;  与基于锁的方案相比，非阻塞算法在设计和实现上都要复杂的多，但他们在可&lt;strong&gt;伸缩性&lt;/strong&gt;和&lt;strong&gt;活跃性&lt;/strong&gt;上缺用于欧巨大的优势。由于非阻塞算法可以使用多个线程在竞争相同的数据时不会发生阻塞，因此它能在粒度更细的层次上进行协调。&lt;/p&gt;

&lt;p&gt;  在基于Lock的算法中，如果一个线程在休眠或者自旋的同事持有一个锁，那么其他线程都无法执行下去，而非阻塞算法不会收到单个线程失败的影响。从Java 5.0开始就可以使用原子变量类(例如AtomicInteger和AtomicReference)来构建高效的非阻塞算法。&lt;/p&gt;

&lt;p&gt;  即使原子变量没有用于非阻塞算法的开发，他们也可以用做一种&lt;strong&gt;更好的volatile类型变量&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;  原子变量提供了与volatile类型变量相同的内存语义，此外还支持原子的更新操作，从而使他们更加适用于实现计数器、序列发生器和统计数据收集等，同时还能比基于锁的方法提供更高的伸缩性。&lt;/p&gt;

&lt;h2 id=&quot;锁的劣势&quot;&gt;锁的劣势&lt;/h2&gt;

&lt;p&gt;  通过使用一致的锁定协议开协调对共享状态的访问，可以确保无论那个线程持有守护变量的锁，都能采用独占方式来访问这些变量，并且对变量的任何修改对随后获得这个锁的其他线程都是可见的。&lt;/p&gt;

&lt;p&gt;现代的许多JVN都对&lt;strong&gt;非竞争锁获取&lt;/strong&gt;和&lt;strong&gt;锁释放&lt;/strong&gt;等操作进行了极大的优化，但如果有多个线程同时请求锁，那么JVM就需要借助操作系统的功能。如果出现了这种情况，那么一些线程将被挂起并且在稍后恢复运行。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;当线程在锁上发生竞争时，智能的JVM不一定会挂起线程，而是根据之前获取操作中对锁的持有时间长短来判断是使次线程&lt;strong&gt;挂起&lt;/strong&gt;还是&lt;strong&gt;自旋&lt;/strong&gt;等待。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/kuliuheng/p/4064680.html&quot;&gt;自旋锁和互斥锁的优缺点&lt;/a&gt;&lt;strong&gt;&lt;em&gt;自旋锁比较适用于锁使用者保持锁时间比较短的情况&lt;/em&gt;&lt;/strong&gt;。++正是由于自旋锁使用者一般保持锁时间非常短，因此选择自旋而不是睡眠是非常必要的，自旋锁的效率远高于互斥锁++。信号量和读写信号量适合于保持时间较长的情况，++它们会导致调用者睡眠++，因此只能在进程上下文使用，而&lt;strong&gt;&lt;em&gt;自旋锁适合于保持时间非常短的情况，它可以在任何上下文使用&lt;/em&gt;&lt;/strong&gt;。子璇所是一种比较低级的保护数据结构或代码片段的原始方式，自旋锁可能存在两个问题(1)死锁，由于轮训(2)过多占用cpu资源，轮训；因此得加以限制&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;  当线程恢复执行时，必须等待其他线程执行完他们的时间以后，才能被调度执行。在挂起和恢复线程等过程中存在很大的开销，并且通常存在这个较长时间的中断。如果在基于锁的类包中包含有细粒度的操作，(例如同步容器类，在其大多数方法中只包含少量的并发操作),那么当在锁上存在激烈的竞争时，调度开销和工作开销的比值会非常高。&lt;/p&gt;

&lt;p&gt;  与锁相比，volatile变量是一种更轻量级的同步机制，因为在使用这些变量时不会发生上下文切换和线程调度等操作。然而，volatile变量同样存在一些局限:虽然和锁机制相似的都提供了可见性保证，但是不能用于构建原子的复合操作。因此，当一个变量依赖其他变量时，或者当变量的新值依赖旧值是，就不能使用volatile变量。这些都限制了volatile变量的使用，因此volatile不能用来实现一些常用的操作，比如计数器或者互斥量。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;虽然理论上可以基于volatile的语义来构造互斥体和其他同步器，但是在实际情况下很难实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如，虽然自增操作(++i)看起来想一个原子操作，但是事实上它包括了三个独立的操作—— 获取变量的当前值，将这个值加1，然后在写入新值。为了确保更新操作不被丢失，整个的读-改-写操作必须是原子的。到目前位置，我们实现这种原子操作的的唯一方式就是使用锁定方法。如下Counter中&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;net.jcip.annotations.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Counter
 * &amp;lt;p/&amp;gt;
 * Simple thread-safe counter using the Java monitor pattern
 *
 * @author Brian Goetz and Tim Peierls
 */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ThreadSafe&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GuardedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;this&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;counter overflow&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//事实上它包括了三个独立的操作—— 获取变量的当前值，将这个值加1，然后在写入新值&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;  锁定还存在其他的一些缺点。但一个线程正在等待锁时，他不能做任何其他事情。如果一个线程在持有锁的情况下被延迟执行(例如发生了缺页错误，调度延迟，或者其他类似情况)，那么所有需要这个锁的线程都无法执行下去。如果被阻塞线程的优先级很高，而持有锁的线程有限级较低，那么这个将是一个很严重的问题——也被称为优先级反转(Priority Inversion)。即使高有限级的线程可以抢先执行，但是仍然需要等待锁被释放，从而导致它的有限级会降至低优先级线程的级别。如果持有锁的线程被永久的阻塞(例如出现了无线循环，死锁，活锁或者其他活跃性故障)，所有等待这个锁的线程就会永远无法执行下去。&lt;strong&gt;幸运的是，在现代的处理器中提供了这种机制。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  即使忽略这些风险，锁定方式对于细粒度的操作(例如递增计数器)来说任然是一种高开消的机制。在管理线程之间的竞争是应该有一种粒度更细的技术，类似于volatile变量的机制，同时还要支持原子的更新操作。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;优先级翻转是当一个高优先级任务通过信号量机制访问共享资源时，该信号量已被一低优先级任务占有，因此造成高优先级任务被许多具有较低优先级任务阻塞，实时性难以得到保证。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如：有优先级为A、B和C三个任务，优先级A&amp;gt;B&amp;gt;C，任务A，B处于挂起状态，等待某一事件发生，任务C正在运行，此时任务C开始使用某一共享资源S。在使用中，任务A等待事件到来，任务A转为就绪态，因为它比任务C优先级高，所以立即执行。当任务A要使用共享资源S时，由于其正在被任务C使用，因此任务A被挂起，任务C开始运行。如果此时任务B等待事件到来，则任务B转为就绪态。由于任务B优先级比任务C高，因此任务B开始运行，直到其运行完毕，任务C才开始运行。直到任务C释放共享资源S后，任务A才得以执行。在这种情况下，优先级发生了翻转，任务B先于任务A运行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/caozhilong/caozhilong.github.io/blob/master/img/arct/JavaConcurrent_PriorityInversion.png&quot; alt=&quot;优先级翻转现象（无优先级继承）&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;T0时刻，只有&lt;strong&gt;C线程&lt;/strong&gt;处于可运行状态，运行过程中，&lt;strong&gt;C线程&lt;/strong&gt;拥有了一个++同步资源SYNCH1++；&lt;/li&gt;
  &lt;li&gt;T1时刻，&lt;strong&gt;B线程&lt;/strong&gt;就绪进入可运行状态，由++于B线程优先级高于正在运行的C线程++，C线程被抢占（未释++放同步资源SYNCH1++），&lt;strong&gt;B线程&lt;/strong&gt;被调度执行；&lt;/li&gt;
  &lt;li&gt;同样地T2时刻，&lt;strong&gt;A线程&lt;/strong&gt;抢占&lt;strong&gt;B线程&lt;/strong&gt;；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A线程&lt;/strong&gt;运行到T3时刻，需要++同步资源SYNCH1++，但SYNCH1被更低优先级的&lt;strong&gt;C线程&lt;/strong&gt;所拥有，&lt;strong&gt;A线程&lt;/strong&gt;被挂起等待该资源，而此时处于可运行状态的线程&lt;strong&gt;B线程&lt;/strong&gt;和&lt;strong&gt;C线程&lt;/strong&gt;中，++B的优先级大于C的优先级++，B线程被调度执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述现象中，优先级最高的A既要等优先级低的B运行完，还要等优先级更低的C运行完之后才能被调度，如果B和C执行的很费时的操作，显然Thread1的被调度时机就不能保证，整个实时调度的性能就很差了。&lt;/p&gt;

&lt;h3 id=&quot;解决优先级翻转&quot;&gt;解决优先级翻转&lt;/h3&gt;

&lt;p&gt;解决优先级翻转问题有优先级天花板(priority ceiling)和优先级继承(priority inheritance)两种办法。&lt;/p&gt;

&lt;h2 id=&quot;硬件对并发的支持&quot;&gt;硬件对并发的支持&lt;/h2&gt;

&lt;p&gt;  独占锁是一项悲观的技术——他假设最坏的情况(如果你不锁门，那么捣蛋鬼就会闯入并搞破坏)，并且只有在确保其他线程不会造成干扰(通过获取正确的锁)的情况下才能执行下去。&lt;/p&gt;

&lt;p&gt;  对于细粒度的操作，还有另外一种更高效的方法，也是一种乐观的方法。通过这种方法可以在不发生干扰的情况下完成更新操作。这种方式需要借助冲出检查机制来判断在更新的过程中是否存在来自其他线程的干扰，如果存在，这个操作将会失败，并且可以c重试(也可以不重试)。这种乐观的方法就好像一句谚语:”原谅被准许更容易得到”，其中”更容易”在这里相当于”“更高效”。&lt;/p&gt;

&lt;p&gt;  在针对多处理器操作而设计的处理器中提供了一些特殊的指令，用于管理对共享数据的并发操作。在早起的处理器初中支持原子的测试并设置(Test-and-Set),获取并递增(Fetch-and-Increment)以及交换(Swap)等指令，这些指令足以实现各种互斥量，而这些互斥量又可以实现更复杂的并发对象。现在几乎所有的现代处理器中都包含了某种形式的原子读-改-写执行，例如病娇交换(Compare-and-Swap)或者关联加载/条件存储(Load-Linked/Store-Conditional),操作系统和JVM使用这些指令来实现锁和并发的数据结构，但在Java 5.0之前，在Java类中还不能直接使用这些指令。&lt;/p&gt;

&lt;h3 id=&quot;比较并交换cas&quot;&gt;比较并交换(CAS)&lt;/h3&gt;

&lt;p&gt;  在大多数处理器架构(包括IA32和Sparc)中采用的方法是实现一个比较并交换(CAS)指令。(在其他处理器中，例如PowerPC，采用一对指令实现相同的功能:关联加载与条件存储。)CAS包含三个操作数——需要读写的内存位置V，进行比较的值A和待写入的新值B。当且精当V的值等于A时，CAS才会通过原子方式用性质B来更新V的值，负责不会执行任何操作。无论位置V的值是否等于A，都将返回V原有的值。（这种变化形式被成为比较并返回，无论操作是否成功都会返回。）CAS的含义是:”我认为V的值应该为A，如果是，那么将V的值更新为B，负责不修改并告诉V实际的值为多少”。CAS是一项乐观的技术，他希望能成功的执行更新操作，并且如果有另外一个线程在最近一次检查后更新了改变量，那么CAS能检测到这个错误。程序清单SimulatedCAS说明了CAS语义(而不是实现或性能)。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;net.jcip.annotations.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * SimulatedCAS
 * &amp;lt;p/&amp;gt;
 * Simulated CAS operation
 *
 * @author Brian Goetz and Tim Peierls
 */&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ThreadSafe&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimulatedCAS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GuardedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;this&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareAndSwap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                           &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareAndSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                              &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedValue&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compareAndSwap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;  当多个线程尝试使用CAS同事更新同一个变量时，只有其中一个线程能更新变量的值，而其他线程豆浆失败。然而，失败的线程并不会被挂起(这与获取锁的情况不同:当获取锁失败时，线程将被挂起)，而是被告知在这次竞争中失败，并可以再次尝试。由于一个线程在竞争CAS时失败不会阻塞，因此它可以决定是否重新尝试，或者执行一些恢复操作，也或者不执行任何操作。这种灵活性就大大减少了与锁相关的活跃性风险(尽管在一些不常见的情况下，任然存在活锁风险)。&lt;/p&gt;

&lt;p&gt;  CAS的典型使用模式是:首先从V中读取值A，并根据A计算新值B，然后再通过CAS以原始方式将V中的值由A变成B(只要在这个起见没有任何线程将V的值修改为其他值).由于CAS能检测到来自其他线程的干扰，因此即使不使用锁也能够实现原子的读-改-写操作序列。&lt;/p&gt;

&lt;h3 id=&quot;非阻塞的计数器&quot;&gt;非阻塞的计数器&lt;/h3&gt;

&lt;p&gt;  程序清单中的CasCounter使用CAS实现了一个线程安全的技术器。递增操作采用了标准形式——读取旧的值，根据它计算出新值(加1)，并使用CAS来设置这个新值。如果CAS失败，那么改操作将立即重试。通常，反复的重试是一种合理的策略，但是存在一些竞争很激烈的情况下，更好的方式是在重试之前首先等待一段时间或者回退，从而避免造成活锁问题。&lt;/p&gt;

&lt;h2 id=&quot;基于cas实现的非阻塞计数器&quot;&gt;基于CAS实现的非阻塞计数器&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;net.jcip.annotations.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * CasCounter
 * &amp;lt;p/&amp;gt;
 * Nonblocking counter using CAS
 *
 * @author Brian Goetz and Tim Peierls
 */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ThreadSafe&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CasCounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimulatedCAS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareAndSwap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;CasCounter不会阻塞，但如果其他线程同事更新计数器，那么会多次执行重试操作。(在实际情况中，如果仅需要一个计数器或序列生成器，那么可以直接使用AtomicInteger或者AtomicLong，他们能提供原子的递增方法以及其他算术方法。)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果在CAS失败时不执行任何操作，那么是一种明智的做法。在非阻塞算法中，例如链表队列中，当CAS失败时，以为这其他线程已经完成了你想要执行的操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;理论上，如果其他线程在每次竞争CAS时总是获胜，那么这个线程每次都会重试，但在实际中很少发生这种类型的饥饿问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  初看起来，基于CAS的技术器似乎比基于锁的计数器在性能上更差一些，因为他需要执行更多的操作和更复杂的控制流，并且还依赖看似复杂的CAS操作。但实际上，当实际上竞争程度不高时，基于CAS的计数器在性能上远远超过了基于锁的计数器，二在没有竞争是甚至更高。如果要快速获取无竞争的锁，那么至少需要一次CAS操作再加上与其他锁相关的操作，因此基于锁的技术器即使在最好的情况下也会笔记与CAS的计数器在一般情况下会执行更多的操作。由于CAS在多多数情况下都能成功执行(假设竞争程度不高)，因此硬件能够正确的预测while循环中的分支，从而吧复杂控制逻辑的开销降至最低。&lt;/p&gt;

&lt;p&gt;  虽然Java语言的锁定语法比较简洁，但JVM和操作在管理锁时需要完成的工作却并不简单。在实现锁定时需要遍历JVM中一条非常复杂的代码路径，并可能导致操作系统级的锁定、线程挂起以及上下问切换等操作。在最好情况下，在锁定时至少需要一次CAS，因此虽然在使用锁时没有用到CAS，但实际上也发节约任何执行开销。另一方面，在程序内部执行CAS是不需要执行JVM代码、系统调用或者线程调度操作。在应用级看起来越长的代码路径，如国家上JVM和操作系统中的代码调用，那么事实上CAS代码却比较少。CAS的主要缺点是，它将使调动者处理竞争问题(通过重试、回退、放弃)，而在锁中能自动处理竞争问题(线程在获得锁之前将一致阻塞)。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;事实上，CAS最大的缺陷在于比较难以围绕这CAS正确的构建外部算法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  CAS的性能会随着处理器数量的不用而变化很大。在单CPU系统中，CAS通常只需要很少的时钟周期，因为不要处理处理器之间的同步。在据并发编程书中描述，非竞争的CAS在多CPU系统中需要10到150个时钟周期的开销。CAS的执行性能不仅在不同的体系架构之间变化很大，甚至在相同处理器的不同版本之间也会有不同。生产厂商迫于竞争的压力，在接下来几年内还会继续提高CAS的性能。一个很管用的经验法则是:在大多数处理器上，在无精症的锁获取和释放的”快速代码路径”“上的开销，大约是CAS开销的两倍。&lt;/p&gt;

&lt;h3 id=&quot;jvm对cas操作的支持&quot;&gt;JVM对CAS操作的支持&lt;/h3&gt;

&lt;p&gt;  那么，Java代码如何确保处理器执行CAS操作?在Java 5.0 之前，如果不编写明确的代码，那么就无法执行CAS。在Java 5.0 中引入了底层的支持，在int、long和对象的应用等类型上都公开了CAS操作，并且JVM把他们编译为底层硬件提供的最有效方法。在支持CAS的平台上，运行时把他们便以为相应的(多条)机器指令。在最坏的情况下，如果不支持CAS指令，那么JVM将使用自旋锁，在原子变量类(例如java.util.concurrent.atomic中的AtomicXXX)中使用了这些底层的JVMN支持为数字类型和应用类型提供一种高效的CAS操作，二在java.util.concurrent中的大多数类在实现时则直接或者简介的使用了这些原子变量类。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
*hotspot 1.7实现的CAS方法
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jbyte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Atomic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmpxchg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jbyte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchange_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jbyte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jbyte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;assumption.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;jint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;jbyte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_as_bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jbyte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;jint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;jbyte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_val_as_bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jbyte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;new_val_as_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchange_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_as_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmpxchg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_val_as_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchange_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_as_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;原子变量类&quot;&gt;原子变量类&lt;/h2&gt;

&lt;p&gt;  原子变量比锁的粒度更细，量级更轻，并且对于在多处理器系统上实现高性能的并发代码来说是非常关键的。原子变量将发生竞争的范围缩小到单个变量上，这是我们可以获得的粒度最细的情况，假设算法能够使用这个粒度来实现。&lt;/p&gt;

</description>
        <pubDate>Tue, 12 Jan 2016 00:15:06 +0800</pubDate>
        <link>http://localhost:4000/2016/01/11/concurrent-noblock-atomic/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/01/11/concurrent-noblock-atomic/</guid>
        
        <category>Concurrent</category>
        
        <category>Atomic</category>
        
        <category>NoBlocked</category>
        
        <category>CAS</category>
        
        
      </item>
    
      <item>
        <title>用户手册markdown示例</title>
        <description>&lt;p&gt;% Pandoc User’s Guide
% John MacFarlane
% January 29, 2017&lt;/p&gt;

&lt;h1 id=&quot;synopsis&quot;&gt;Synopsis&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pandoc&lt;/code&gt; [&lt;em&gt;options&lt;/em&gt;] [&lt;em&gt;input-file&lt;/em&gt;]…&lt;/p&gt;

&lt;h1 id=&quot;description&quot;&gt;Description&lt;/h1&gt;

&lt;p&gt;Pandoc is a &lt;a href=&quot;https://www.haskell.org&quot;&gt;Haskell&lt;/a&gt; library for converting from one markup format to
another, and a command-line tool that uses this library. It can read
&lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;, &lt;a href=&quot;http://commonmark.org&quot;&gt;CommonMark&lt;/a&gt;, &lt;a href=&quot;https://michelf.ca/projects/php-markdown/extra/&quot;&gt;PHP Markdown Extra&lt;/a&gt;, &lt;a href=&quot;https://help.github.com/articles/github-flavored-markdown/&quot;&gt;GitHub-Flavored Markdown&lt;/a&gt;,
&lt;a href=&quot;http://fletcherpenney.net/multimarkdown/&quot;&gt;MultiMarkdown&lt;/a&gt;, and (subsets of) &lt;a href=&quot;http://redcloth.org/textile&quot;&gt;Textile&lt;/a&gt;, &lt;a href=&quot;http://docutils.sourceforge.net/docs/ref/rst/introduction.html&quot;&gt;reStructuredText&lt;/a&gt;, &lt;a href=&quot;http://www.w3.org/html/&quot;&gt;HTML&lt;/a&gt;,
&lt;a href=&quot;http://latex-project.org&quot;&gt;LaTeX&lt;/a&gt;, &lt;a href=&quot;https://www.mediawiki.org/wiki/Help:Formatting&quot;&gt;MediaWiki markup&lt;/a&gt;, &lt;a href=&quot;http://twiki.org/cgi-bin/view/TWiki/TextFormattingRules&quot;&gt;TWiki markup&lt;/a&gt;, &lt;a href=&quot;https://www.haskell.org/haddock/doc/html/ch03s08.html&quot;&gt;Haddock markup&lt;/a&gt;, &lt;a href=&quot;http://dev.opml.org/spec2.html&quot;&gt;OPML&lt;/a&gt;, &lt;a href=&quot;http://orgmode.org&quot;&gt;Emacs
Org mode&lt;/a&gt;, &lt;a href=&quot;http://docbook.org&quot;&gt;DocBook&lt;/a&gt;, &lt;a href=&quot;http://txt2tags.org&quot;&gt;txt2tags&lt;/a&gt;, &lt;a href=&quot;http://idpf.org/epub&quot;&gt;EPUB&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/OpenDocument&quot;&gt;ODT&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Office_Open_XML&quot;&gt;Word docx&lt;/a&gt;; and it can
write plain text, &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;, &lt;a href=&quot;http://commonmark.org&quot;&gt;CommonMark&lt;/a&gt;, &lt;a href=&quot;https://michelf.ca/projects/php-markdown/extra/&quot;&gt;PHP Markdown Extra&lt;/a&gt;,
&lt;a href=&quot;https://help.github.com/articles/github-flavored-markdown/&quot;&gt;GitHub-Flavored Markdown&lt;/a&gt;, &lt;a href=&quot;http://fletcherpenney.net/multimarkdown/&quot;&gt;MultiMarkdown&lt;/a&gt;, &lt;a href=&quot;http://docutils.sourceforge.net/docs/ref/rst/introduction.html&quot;&gt;reStructuredText&lt;/a&gt;, &lt;a href=&quot;http://www.w3.org/TR/xhtml1/&quot;&gt;XHTML&lt;/a&gt;,
&lt;a href=&quot;http://www.w3.org/TR/html5/&quot;&gt;HTML5&lt;/a&gt;, &lt;a href=&quot;http://latex-project.org&quot;&gt;LaTeX&lt;/a&gt; (including &lt;a href=&quot;https://ctan.org/pkg/beamer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;beamer&lt;/code&gt;&lt;/a&gt; slide shows), &lt;a href=&quot;http://www.contextgarden.net/&quot;&gt;ConTeXt&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Rich_Text_Format&quot;&gt;RTF&lt;/a&gt;, &lt;a href=&quot;http://dev.opml.org/spec2.html&quot;&gt;OPML&lt;/a&gt;,
&lt;a href=&quot;http://docbook.org&quot;&gt;DocBook&lt;/a&gt;, &lt;a href=&quot;http://opendocument.xml.org&quot;&gt;OpenDocument&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/OpenDocument&quot;&gt;ODT&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Office_Open_XML&quot;&gt;Word docx&lt;/a&gt;, &lt;a href=&quot;http://www.gnu.org/software/texinfo/&quot;&gt;GNU Texinfo&lt;/a&gt;, &lt;a href=&quot;https://www.mediawiki.org/wiki/Help:Formatting&quot;&gt;MediaWiki
markup&lt;/a&gt;, &lt;a href=&quot;https://www.dokuwiki.org/dokuwiki&quot;&gt;DokuWiki markup&lt;/a&gt;, &lt;a href=&quot;http://zim-wiki.org/manual/Help/Wiki_Syntax.html&quot;&gt;ZimWiki markup&lt;/a&gt;, &lt;a href=&quot;https://www.haskell.org/haddock/doc/html/ch03s08.html&quot;&gt;Haddock markup&lt;/a&gt;,
&lt;a href=&quot;http://idpf.org/epub&quot;&gt;EPUB&lt;/a&gt; (v2 or v3), &lt;a href=&quot;http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1&quot;&gt;FictionBook2&lt;/a&gt;, &lt;a href=&quot;http://redcloth.org/textile&quot;&gt;Textile&lt;/a&gt;, &lt;a href=&quot;http://man7.org/linux/man-pages/man7/groff_man.7.html&quot;&gt;groff man&lt;/a&gt; pages,
&lt;a href=&quot;http://orgmode.org&quot;&gt;Emacs Org mode&lt;/a&gt;, &lt;a href=&quot;http://www.methods.co.nz/asciidoc/&quot;&gt;AsciiDoc&lt;/a&gt;, &lt;a href=&quot;https://www.adobe.com/content/dam/Adobe/en/devnet/indesign/cs55-docs/IDML/idml-specification.pdf&quot;&gt;InDesign ICML&lt;/a&gt;, &lt;a href=&quot;https://github.com/TEIC/TEI-Simple&quot;&gt;TEI Simple&lt;/a&gt;, and &lt;a href=&quot;http://www.w3.org/Talks/Tools/Slidy/&quot;&gt;Slidy&lt;/a&gt;,
&lt;a href=&quot;http://goessner.net/articles/slideous/&quot;&gt;Slideous&lt;/a&gt;, &lt;a href=&quot;http://paulrouget.com/dzslides/&quot;&gt;DZSlides&lt;/a&gt;, &lt;a href=&quot;http://lab.hakim.se/reveal-js/&quot;&gt;reveal.js&lt;/a&gt; or &lt;a href=&quot;http://meyerweb.com/eric/tools/s5/&quot;&gt;S5&lt;/a&gt; HTML slide shows. It can also
produce &lt;a href=&quot;https://www.adobe.com/pdf/&quot;&gt;PDF&lt;/a&gt; output on systems where LaTeX, ConTeXt, or &lt;code class=&quot;highlighter-rouge&quot;&gt;wkhtmltopdf&lt;/code&gt; is
installed.&lt;/p&gt;

&lt;p&gt;Pandoc’s enhanced version of Markdown includes syntax for [footnotes],
[tables], flexible [ordered lists], [definition lists], [fenced code blocks],
[superscripts and subscripts], [strikeout], [metadata blocks], automatic tables of
contents, embedded LaTeX [math], [citations], and [Markdown inside HTML block
elements][Extension: &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_in_html_blocks&lt;/code&gt;]. (These enhancements, described
further under [Pandoc’s Markdown], can be disabled using the
&lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_strict&lt;/code&gt; input or output format.)&lt;/p&gt;

&lt;p&gt;In contrast to most existing tools for converting Markdown to HTML, which
use regex substitutions, pandoc has a modular design: it consists of a
set of readers, which parse text in a given format and produce a native
representation of the document, and a set of writers, which convert
this native representation into a target format. Thus, adding an input
or output format requires only adding a reader or writer.&lt;/p&gt;

&lt;p&gt;Because pandoc’s intermediate representation of a document is less
expressive than many of the formats it converts between, one should
not expect perfect conversions between every format and every other.
Pandoc attempts to preserve the structural elements of a document, but
not formatting details such as margin size.  And some document elements,
such as complex tables, may not fit into pandoc’s simple document
model.  While conversions from pandoc’s Markdown to all formats aspire
to be perfect, conversions from formats more expressive than pandoc’s
Markdown can be expected to be lossy.&lt;/p&gt;

&lt;h2 id=&quot;using-pandoc&quot;&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;pandoc&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;If no &lt;em&gt;input-file&lt;/em&gt; is specified, input is read from &lt;em&gt;stdin&lt;/em&gt;.
Otherwise, the &lt;em&gt;input-files&lt;/em&gt; are concatenated (with a blank
line between each) and used as input.  Output goes to &lt;em&gt;stdout&lt;/em&gt; by
default (though output to &lt;em&gt;stdout&lt;/em&gt; is disabled for the &lt;code class=&quot;highlighter-rouge&quot;&gt;odt&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;docx&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;epub&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;epub3&lt;/code&gt; output formats).  For output to a file, use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt; option:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc -o output.html input.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By default, pandoc produces a document fragment, not a standalone
document with a proper header and footer.  To produce a standalone
document, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--standalone&lt;/code&gt; flag:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc -s -o output.html input.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For more information on how standalone documents are produced, see
[Templates], below.&lt;/p&gt;

&lt;p&gt;Instead of a file, an absolute URI may be given.  In this case
pandoc will fetch the content using HTTP:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc -f html -t markdown http://www.fsf.org
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If multiple input files are given, &lt;code class=&quot;highlighter-rouge&quot;&gt;pandoc&lt;/code&gt; will concatenate them all (with
blank lines between them) before parsing. This feature is disabled for
 binary input formats such as &lt;code class=&quot;highlighter-rouge&quot;&gt;EPUB&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;odt&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;docx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The format of the input and output can be specified explicitly using
command-line options.  The input format can be specified using the
&lt;code class=&quot;highlighter-rouge&quot;&gt;-r/--read&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-f/--from&lt;/code&gt; options, the output format using the
&lt;code class=&quot;highlighter-rouge&quot;&gt;-w/--write&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-t/--to&lt;/code&gt; options.  Thus, to convert &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.txt&lt;/code&gt; from
Markdown to LaTeX, you could type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc -f markdown -t latex hello.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To convert &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.html&lt;/code&gt; from HTML to Markdown:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc -f html -t markdown hello.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Supported output formats are listed below under the &lt;code class=&quot;highlighter-rouge&quot;&gt;-t/--to&lt;/code&gt; option.
Supported input formats are listed below under the &lt;code class=&quot;highlighter-rouge&quot;&gt;-f/--from&lt;/code&gt; option. Note
that the &lt;code class=&quot;highlighter-rouge&quot;&gt;rst&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;textile&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;latex&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; readers are not complete;
there are some constructs that they do not parse.&lt;/p&gt;

&lt;p&gt;If the input or output format is not specified explicitly, &lt;code class=&quot;highlighter-rouge&quot;&gt;pandoc&lt;/code&gt;
will attempt to guess it from the extensions of
the input and output filenames.  Thus, for example,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc -o hello.tex hello.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;will convert &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.txt&lt;/code&gt; from Markdown to LaTeX.  If no output file
is specified (so that output goes to &lt;em&gt;stdout&lt;/em&gt;), or if the output file’s
extension is unknown, the output format will default to HTML.
If no input file is specified (so that input comes from &lt;em&gt;stdin&lt;/em&gt;), or
if the input files’ extensions are unknown, the input format will
be assumed to be Markdown unless explicitly specified.&lt;/p&gt;

&lt;p&gt;Pandoc uses the UTF-8 character encoding for both input and output.
If your local character encoding is not UTF-8, you
should pipe input and output through &lt;a href=&quot;http://www.gnu.org/software/libiconv/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iconv&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iconv -t utf-8 input.txt | pandoc | iconv -f utf-8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that in some output formats (such as HTML, LaTeX, ConTeXt,
RTF, OPML, DocBook, and Texinfo), information about
the character encoding is included in the document header, which
will only be included if you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-s/--standalone&lt;/code&gt; option.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-pdf&quot;&gt;Creating a PDF&lt;/h2&gt;

&lt;p&gt;To produce a PDF, specify an output file with a &lt;code class=&quot;highlighter-rouge&quot;&gt;.pdf&lt;/code&gt; extension.
By default, pandoc will use LaTeX to convert it to PDF:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc test.txt -o test.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Production of a PDF requires that a LaTeX engine be installed (see
&lt;code class=&quot;highlighter-rouge&quot;&gt;--latex-engine&lt;/code&gt;, below), and assumes that the following LaTeX packages
are available: &lt;a href=&quot;https://ctan.org/pkg/amsfonts&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;amsfonts&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/amsmath&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;amsmath&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/lm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lm&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://ctan.org/pkg/ifxetex&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ifxetex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/ifluatex&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ifluatex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/eurosym&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eurosym&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/listings&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;listings&lt;/code&gt;&lt;/a&gt; (if the
&lt;code class=&quot;highlighter-rouge&quot;&gt;--listings&lt;/code&gt; option is used), &lt;a href=&quot;https://ctan.org/pkg/fancyvrb&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fancyvrb&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/longtable&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;longtable&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://ctan.org/pkg/booktabs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;booktabs&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/graphicx&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;graphicx&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://ctan.org/pkg/grffile&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grffile&lt;/code&gt;&lt;/a&gt; (if the
document contains images), &lt;a href=&quot;https://ctan.org/pkg/hyperref&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hyperref&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/ulem&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ulem&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://ctan.org/pkg/geometry&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;geometry&lt;/code&gt;&lt;/a&gt; (with the &lt;code class=&quot;highlighter-rouge&quot;&gt;geometry&lt;/code&gt; variable set), &lt;a href=&quot;https://ctan.org/pkg/setspace&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setspace&lt;/code&gt;&lt;/a&gt; (with
&lt;code class=&quot;highlighter-rouge&quot;&gt;linestretch&lt;/code&gt;), and &lt;a href=&quot;https://ctan.org/pkg/babel&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;babel&lt;/code&gt;&lt;/a&gt; (with &lt;code class=&quot;highlighter-rouge&quot;&gt;lang&lt;/code&gt;). The use of &lt;code class=&quot;highlighter-rouge&quot;&gt;xelatex&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;lualatex&lt;/code&gt; as the LaTeX engine requires &lt;a href=&quot;https://ctan.org/pkg/fontspec&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fontspec&lt;/code&gt;&lt;/a&gt;; &lt;code class=&quot;highlighter-rouge&quot;&gt;xelatex&lt;/code&gt; uses
&lt;a href=&quot;https://ctan.org/pkg/mathspec&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mathspec&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/polyglossia&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;polyglossia&lt;/code&gt;&lt;/a&gt; (with &lt;code class=&quot;highlighter-rouge&quot;&gt;lang&lt;/code&gt;), &lt;a href=&quot;https://ctan.org/pkg/xecjk&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xecjk&lt;/code&gt;&lt;/a&gt;, and
&lt;a href=&quot;https://ctan.org/pkg/bidi&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bidi&lt;/code&gt;&lt;/a&gt; (with the &lt;code class=&quot;highlighter-rouge&quot;&gt;dir&lt;/code&gt; variable set). The &lt;a href=&quot;https://ctan.org/pkg/upquote&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;upquote&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://ctan.org/pkg/microtype&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;microtype&lt;/code&gt;&lt;/a&gt; packages are used if available, and &lt;a href=&quot;https://ctan.org/pkg/csquotes&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;csquotes&lt;/code&gt;&lt;/a&gt; will
be used for [smart punctuation] if added to the template or included in
any header file. The &lt;a href=&quot;https://ctan.org/pkg/natbib&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;natbib&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/biblatex&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biblatex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/bibtex&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bibtex&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://ctan.org/pkg/biber&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biber&lt;/code&gt;&lt;/a&gt;
packages can optionally be used for [citation rendering]. These are
included with all recent versions of &lt;a href=&quot;http://www.tug.org/texlive/&quot;&gt;TeX Live&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, pandoc can use ConTeXt or &lt;code class=&quot;highlighter-rouge&quot;&gt;wkhtmltopdf&lt;/code&gt; to create a PDF.
To do this, specify an output file with a &lt;code class=&quot;highlighter-rouge&quot;&gt;.pdf&lt;/code&gt; extension,
as before, but add &lt;code class=&quot;highlighter-rouge&quot;&gt;-t context&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-t html5&lt;/code&gt; to the command line.&lt;/p&gt;

&lt;p&gt;PDF output can be controlled using [variables for LaTeX] (if
LaTeX is used) and [variables for ConTeXt] (if ConTeXt is used).
If &lt;code class=&quot;highlighter-rouge&quot;&gt;wkhtmltopdf&lt;/code&gt; is used, then the variables &lt;code class=&quot;highlighter-rouge&quot;&gt;margin-left&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;margin-right&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;margin-top&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;margin-bottom&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;papersize&lt;/code&gt;
will affect the output, as will &lt;code class=&quot;highlighter-rouge&quot;&gt;--css&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;options&quot;&gt;Options&lt;/h1&gt;

&lt;h2 id=&quot;general-options&quot;&gt;General options&lt;/h2&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; &lt;em&gt;FORMAT&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; &lt;em&gt;FORMAT&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--from=&lt;/code&gt;&lt;em&gt;FORMAT&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--read=&lt;/code&gt;&lt;em&gt;FORMAT&lt;/em&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Specify input format.  &lt;em&gt;FORMAT&lt;/em&gt; can be &lt;code class=&quot;highlighter-rouge&quot;&gt;native&lt;/code&gt; (native Haskell),
&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; (JSON version of native AST), &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt; (pandoc’s
extended Markdown), &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_strict&lt;/code&gt; (original unextended
Markdown), &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_phpextra&lt;/code&gt; (PHP Markdown Extra), &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_github&lt;/code&gt;
(GitHub-Flavored Markdown), &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_mmd&lt;/code&gt; (MultiMarkdown),
&lt;code class=&quot;highlighter-rouge&quot;&gt;commonmark&lt;/code&gt; (CommonMark Markdown), &lt;code class=&quot;highlighter-rouge&quot;&gt;textile&lt;/code&gt; (Textile), &lt;code class=&quot;highlighter-rouge&quot;&gt;rst&lt;/code&gt;
(reStructuredText), &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; (HTML), &lt;code class=&quot;highlighter-rouge&quot;&gt;docbook&lt;/code&gt; (DocBook), &lt;code class=&quot;highlighter-rouge&quot;&gt;t2t&lt;/code&gt;
(txt2tags), &lt;code class=&quot;highlighter-rouge&quot;&gt;docx&lt;/code&gt; (docx), &lt;code class=&quot;highlighter-rouge&quot;&gt;odt&lt;/code&gt; (ODT), &lt;code class=&quot;highlighter-rouge&quot;&gt;epub&lt;/code&gt; (EPUB), &lt;code class=&quot;highlighter-rouge&quot;&gt;opml&lt;/code&gt; (OPML),
&lt;code class=&quot;highlighter-rouge&quot;&gt;org&lt;/code&gt; (Emacs Org mode), &lt;code class=&quot;highlighter-rouge&quot;&gt;mediawiki&lt;/code&gt; (MediaWiki markup), &lt;code class=&quot;highlighter-rouge&quot;&gt;twiki&lt;/code&gt; (TWiki
markup), &lt;code class=&quot;highlighter-rouge&quot;&gt;haddock&lt;/code&gt; (Haddock markup), or &lt;code class=&quot;highlighter-rouge&quot;&gt;latex&lt;/code&gt; (LaTeX).  If
&lt;code class=&quot;highlighter-rouge&quot;&gt;+lhs&lt;/code&gt; is appended to &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rst&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;latex&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;, the
input will be treated as literate Haskell source: see [Literate
Haskell support], below. Markdown
syntax extensions can be individually enabled or disabled by
appending &lt;code class=&quot;highlighter-rouge&quot;&gt;+EXTENSION&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-EXTENSION&lt;/code&gt; to the format name. So, for
example, &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_strict+footnotes+definition_lists&lt;/code&gt; is strict
Markdown with footnotes and definition lists enabled, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;markdown-pipe_tables+hard_line_breaks&lt;/code&gt; is pandoc’s Markdown
without pipe tables and with hard line breaks. See [Pandoc’s
Markdown], below, for a list of extensions and
their names.  See &lt;code class=&quot;highlighter-rouge&quot;&gt;--list-input-formats&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--list-extensions&lt;/code&gt;,
below.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt; &lt;em&gt;FORMAT&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; &lt;em&gt;FORMAT&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--to=&lt;/code&gt;&lt;em&gt;FORMAT&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--write=&lt;/code&gt;&lt;em&gt;FORMAT&lt;/em&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Specify output format.  &lt;em&gt;FORMAT&lt;/em&gt; can be &lt;code class=&quot;highlighter-rouge&quot;&gt;native&lt;/code&gt; (native Haskell),
&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; (JSON version of native AST), &lt;code class=&quot;highlighter-rouge&quot;&gt;plain&lt;/code&gt; (plain text),
&lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt; (pandoc’s extended Markdown), &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_strict&lt;/code&gt;
(original unextended Markdown), &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_phpextra&lt;/code&gt; (PHP Markdown
Extra), &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_github&lt;/code&gt; (GitHub-Flavored Markdown), &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_mmd&lt;/code&gt;
(MultiMarkdown), &lt;code class=&quot;highlighter-rouge&quot;&gt;commonmark&lt;/code&gt; (CommonMark Markdown), &lt;code class=&quot;highlighter-rouge&quot;&gt;rst&lt;/code&gt;
(reStructuredText), &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; (XHTML), &lt;code class=&quot;highlighter-rouge&quot;&gt;html5&lt;/code&gt; (HTML5), &lt;code class=&quot;highlighter-rouge&quot;&gt;latex&lt;/code&gt;
(LaTeX), &lt;code class=&quot;highlighter-rouge&quot;&gt;beamer&lt;/code&gt; (LaTeX beamer slide show), &lt;code class=&quot;highlighter-rouge&quot;&gt;context&lt;/code&gt; (ConTeXt),
&lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; (groff man), &lt;code class=&quot;highlighter-rouge&quot;&gt;mediawiki&lt;/code&gt; (MediaWiki markup),
&lt;code class=&quot;highlighter-rouge&quot;&gt;dokuwiki&lt;/code&gt; (DokuWiki markup), &lt;code class=&quot;highlighter-rouge&quot;&gt;zimwiki&lt;/code&gt; (ZimWiki markup),
&lt;code class=&quot;highlighter-rouge&quot;&gt;textile&lt;/code&gt; (Textile), &lt;code class=&quot;highlighter-rouge&quot;&gt;org&lt;/code&gt; (Emacs Org mode),
&lt;code class=&quot;highlighter-rouge&quot;&gt;texinfo&lt;/code&gt; (GNU Texinfo), &lt;code class=&quot;highlighter-rouge&quot;&gt;opml&lt;/code&gt; (OPML), &lt;code class=&quot;highlighter-rouge&quot;&gt;docbook&lt;/code&gt; (DocBook 4),
&lt;code class=&quot;highlighter-rouge&quot;&gt;docbook5&lt;/code&gt; (DocBook 5), &lt;code class=&quot;highlighter-rouge&quot;&gt;opendocument&lt;/code&gt; (OpenDocument), &lt;code class=&quot;highlighter-rouge&quot;&gt;odt&lt;/code&gt;
(OpenOffice text document), &lt;code class=&quot;highlighter-rouge&quot;&gt;docx&lt;/code&gt; (Word docx), &lt;code class=&quot;highlighter-rouge&quot;&gt;haddock&lt;/code&gt;
(Haddock markup), &lt;code class=&quot;highlighter-rouge&quot;&gt;rtf&lt;/code&gt; (rich text format), &lt;code class=&quot;highlighter-rouge&quot;&gt;epub&lt;/code&gt; (EPUB v2
book), &lt;code class=&quot;highlighter-rouge&quot;&gt;epub3&lt;/code&gt; (EPUB v3), &lt;code class=&quot;highlighter-rouge&quot;&gt;fb2&lt;/code&gt; (FictionBook2 e-book),
&lt;code class=&quot;highlighter-rouge&quot;&gt;asciidoc&lt;/code&gt; (AsciiDoc), &lt;code class=&quot;highlighter-rouge&quot;&gt;icml&lt;/code&gt; (InDesign ICML), &lt;code class=&quot;highlighter-rouge&quot;&gt;tei&lt;/code&gt; (TEI
Simple), &lt;code class=&quot;highlighter-rouge&quot;&gt;slidy&lt;/code&gt; (Slidy HTML and JavaScript slide show),
&lt;code class=&quot;highlighter-rouge&quot;&gt;slideous&lt;/code&gt; (Slideous HTML and JavaScript slide show),
&lt;code class=&quot;highlighter-rouge&quot;&gt;dzslides&lt;/code&gt; (DZSlides HTML5 + JavaScript slide show),
&lt;code class=&quot;highlighter-rouge&quot;&gt;revealjs&lt;/code&gt; (reveal.js HTML5 + JavaScript slide show), &lt;code class=&quot;highlighter-rouge&quot;&gt;s5&lt;/code&gt;
(S5 HTML and JavaScript slide show), or the path of a custom
lua writer (see [Custom writers], below). Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;odt&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;epub&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;epub3&lt;/code&gt; output will not be directed to &lt;em&gt;stdout&lt;/em&gt;;
an output filename must be specified using the &lt;code class=&quot;highlighter-rouge&quot;&gt;-o/--output&lt;/code&gt;
option. If &lt;code class=&quot;highlighter-rouge&quot;&gt;+lhs&lt;/code&gt; is appended to &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rst&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;latex&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;beamer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;html5&lt;/code&gt;, the output will be rendered as
literate Haskell source: see [Literate Haskell support],
below.  Markdown syntax extensions can be individually
enabled or disabled by appending &lt;code class=&quot;highlighter-rouge&quot;&gt;+EXTENSION&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;-EXTENSION&lt;/code&gt; to the format name, as described above under &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt;.
See &lt;code class=&quot;highlighter-rouge&quot;&gt;--list-output-formats&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--list-extensions&lt;/code&gt;, below.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt; &lt;em&gt;FILE&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--output=&lt;/code&gt;&lt;em&gt;FILE&lt;/em&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Write output to &lt;em&gt;FILE&lt;/em&gt; instead of &lt;em&gt;stdout&lt;/em&gt;.  If &lt;em&gt;FILE&lt;/em&gt; is
&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;, output will go to &lt;em&gt;stdout&lt;/em&gt;.  (Exception: if the output
format is &lt;code class=&quot;highlighter-rouge&quot;&gt;odt&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;docx&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;epub&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;epub3&lt;/code&gt;, output to stdout is disabled.)&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--data-dir=&lt;/code&gt;&lt;em&gt;DIRECTORY&lt;/em&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Specify the user data directory to search for pandoc data files.
If this option is not specified, the default user data directory
will be used.  This is, in Unix:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$HOME/.pandoc
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;in Windows XP:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Documents And Settings\USERNAME\Application Data\pandoc
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;and in Windows Vista or later:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\USERNAME\AppData\Roaming\pandoc
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;You can find the default user data directory on your system by
looking at the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;pandoc --version&lt;/code&gt;.
A &lt;code class=&quot;highlighter-rouge&quot;&gt;reference.odt&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reference.docx&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;epub.css&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;templates&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;slidy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;slideous&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;s5&lt;/code&gt; directory
placed in this directory will override pandoc’s normal defaults.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--bash-completion&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Generate a bash completion script.  To enable bash completion
with pandoc, add this to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; eval &quot;$(pandoc --bash-completion)&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--verbose&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Give verbose debugging output.  Currently this only has an effect
with PDF output.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--list-input-formats&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;List supported input formats, one per line.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--list-output-formats&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;List supported output formats, one per line.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--list-extensions&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;List supported Markdown extensions, one per line, followed
by a &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; indicating whether it is enabled by default
in pandoc’s Markdown.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--list-highlight-languages&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;List supported languages for syntax highlighting, one per
line.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--list-highlight-styles&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;List supported styles for syntax highlighting, one per line.
See &lt;code class=&quot;highlighter-rouge&quot;&gt;--highlight-style&lt;/code&gt;.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--version&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Print version.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-h&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Show usage message.&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&quot;reader-options&quot;&gt;Reader options&lt;/h2&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-R&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--parse-raw&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Parse untranslatable HTML codes and LaTeX environments as raw HTML
or LaTeX, instead of ignoring them.  Affects only HTML and LaTeX
input. Raw HTML can be printed in Markdown, reStructuredText, Emacs Org
mode, HTML, Slidy, Slideous, DZSlides, reveal.js, and S5 output; raw LaTeX
can be printed in Markdown, reStructuredText, Emacs Org mode, LaTeX, and
ConTeXt output.  The default is for the readers to omit untranslatable
HTML codes and LaTeX environments.  (The LaTeX reader does pass through
untranslatable LaTeX &lt;em&gt;commands&lt;/em&gt;, even if &lt;code class=&quot;highlighter-rouge&quot;&gt;-R&lt;/code&gt; is not specified.)&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-S&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--smart&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Produce typographically correct output, converting straight quotes
to curly quotes, &lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt; to em-dashes, &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; to en-dashes, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt; to ellipses. Nonbreaking spaces are inserted after certain
abbreviations, such as “Mr.” (Note: This option is selected automatically
when the output format is &lt;code class=&quot;highlighter-rouge&quot;&gt;latex&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;context&lt;/code&gt;, unless &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-tex-ligatures&lt;/code&gt;
is used.  It has no effect for &lt;code class=&quot;highlighter-rouge&quot;&gt;latex&lt;/code&gt; input.)&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--old-dashes&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Selects the pandoc &amp;lt;= 1.8.2.1 behavior for parsing smart dashes: &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; before
a numeral is an en-dash, and &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; is an em-dash.  This option is selected
automatically for &lt;code class=&quot;highlighter-rouge&quot;&gt;textile&lt;/code&gt; input.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--base-header-level=&lt;/code&gt;&lt;em&gt;NUMBER&lt;/em&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Specify the base level for headers (defaults to 1).&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--indented-code-classes=&lt;/code&gt;&lt;em&gt;CLASSES&lt;/em&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Specify classes to use for indented code blocks–for example,
&lt;code class=&quot;highlighter-rouge&quot;&gt;perl,numberLines&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;haskell&lt;/code&gt;. Multiple classes may be separated
by spaces or commas.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--default-image-extension=&lt;/code&gt;&lt;em&gt;EXTENSION&lt;/em&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Specify a default extension to use when image paths/URLs have no
extension.  This allows you to use the same source for formats that
require different kinds of images.  Currently this option only affects
the Markdown and LaTeX readers.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--file-scope&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Parse each file individually before combining for multifile
documents. This will allow footnotes in different files with the
same identifiers to work as expected. If this option is set,
footnotes and links will not work across files. Reading binary
files (docx, odt, epub) implies &lt;code class=&quot;highlighter-rouge&quot;&gt;--file-scope&lt;/code&gt;.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--filter=&lt;/code&gt;&lt;em&gt;PROGRAM&lt;/em&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Specify an executable to be used as a filter transforming the
pandoc AST after the input is parsed and before the output is
written.  The executable should read JSON from stdin and write
JSON to stdout.  The JSON must be formatted like  pandoc’s own
JSON input and output.  The name of the output format will be
passed to the filter as the first argument.  Hence,&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc --filter ./caps.py -t latex
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;is equivalent to&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc -t json | ./caps.py latex | pandoc -f json -t latex
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;The latter form may be useful for debugging filters.&lt;/p&gt;

    &lt;p&gt;Filters may be written in any language.  &lt;code class=&quot;highlighter-rouge&quot;&gt;Text.Pandoc.JSON&lt;/code&gt;
exports &lt;code class=&quot;highlighter-rouge&quot;&gt;toJSONFilter&lt;/code&gt; to facilitate writing filters in Haskell.
Those who would prefer to write filters in python can use the
module &lt;a href=&quot;https://github.com/jgm/pandocfilters&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pandocfilters&lt;/code&gt;&lt;/a&gt;, installable from PyPI. There are also
pandoc filter libraries in &lt;a href=&quot;https://github.com/vinai/pandocfilters-php&quot;&gt;PHP&lt;/a&gt;, &lt;a href=&quot;https://metacpan.org/pod/Pandoc::Filter&quot;&gt;perl&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/mvhenderson/pandoc-filter-node&quot;&gt;javascript/node.js&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;In order of preference, pandoc will look for filters in&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;a specified full or relative path (executable or
 non-executable)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$DATADIR/filters&lt;/code&gt; (executable or non-executable)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; (executable only)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-M&lt;/code&gt; &lt;em&gt;KEY&lt;/em&gt;[&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;&lt;em&gt;VAL&lt;/em&gt;], &lt;code class=&quot;highlighter-rouge&quot;&gt;--metadata=&lt;/code&gt;&lt;em&gt;KEY&lt;/em&gt;[&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;&lt;em&gt;VAL&lt;/em&gt;]&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Set the metadata field &lt;em&gt;KEY&lt;/em&gt; to the value &lt;em&gt;VAL&lt;/em&gt;.  A value specified
on the command line overrides a value specified in the document.
Values will be parsed as YAML boolean or string values. If no value is
specified, the value will be treated as Boolean true.  Like
&lt;code class=&quot;highlighter-rouge&quot;&gt;--variable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--metadata&lt;/code&gt; causes template variables to be set.
But unlike &lt;code class=&quot;highlighter-rouge&quot;&gt;--variable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--metadata&lt;/code&gt; affects the metadata of the
underlying document (which is accessible from filters and may be
printed in some output formats).&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--normalize&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Normalize the document after reading:  merge adjacent
&lt;code class=&quot;highlighter-rouge&quot;&gt;Str&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Emph&lt;/code&gt; elements, for example, and remove repeated &lt;code class=&quot;highlighter-rouge&quot;&gt;Space&lt;/code&gt;s.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--preserve-tabs&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Preserve tabs instead of converting them to spaces (the default).
Note that this will only affect tabs in literal code spans and code
blocks; tabs in regular text will be treated as spaces.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--tab-stop=&lt;/code&gt;&lt;em&gt;NUMBER&lt;/em&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Specify the number of spaces per tab (default is 4).&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--track-changes=accept&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;:   Specifies what to do with insertions, deletions, and comments
    produced by the MS Word “Track Changes” feature.  &lt;code class=&quot;highlighter-rouge&quot;&gt;accept&lt;/code&gt; (the
    default), inserts all insertions, and ignores all
    deletions. &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt; inserts all deletions and ignores
    insertions. Both &lt;code class=&quot;highlighter-rouge&quot;&gt;accept&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt; ignore comments. &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; puts
    in insertions, deletions, and comments, wrapped in spans with
    &lt;code class=&quot;highlighter-rouge&quot;&gt;insertion&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;deletion&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;comment-start&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;comment-end&lt;/code&gt;
    classes, respectively. The author and time of change is
    included. &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; is useful for scripting: only accepting changes
    from a certain reviewer, say, or before a certain date. This
    option only affects the docx reader.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--extract-media=&lt;/code&gt;&lt;em&gt;DIR&lt;/em&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Extract images and other media contained in a docx or epub container
to the path &lt;em&gt;DIR&lt;/em&gt;, creating it if necessary, and adjust the images
references in the document so they point to the extracted files.
This option only affects the docx and epub readers.&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&quot;general-writer-options&quot;&gt;General writer options&lt;/h2&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--standalone&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Produce output with an appropriate header and footer (e.g. a
standalone HTML, LaTeX, TEI, or RTF file, not a fragment).  This option
is set automatically for &lt;code class=&quot;highlighter-rouge&quot;&gt;pdf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;epub&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;epub3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fb2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;docx&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;odt&lt;/code&gt;
output.&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

</description>
        <pubDate>Fri, 01 Jan 2016 18:18:56 +0800</pubDate>
        <link>http://localhost:4000/2016/01/01/guide-with-markdown/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/01/01/guide-with-markdown/</guid>
        
        <category>markdown</category>
        
        
      </item>
    
  </channel>
</rss>
